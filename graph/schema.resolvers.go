package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"

	"github.com/carlosruizg/muni/graph/model"
)

// AddResponse is the resolver for the addResponse field.
func (r *mutationResolver) AddResponse(ctx context.Context, taskID string, response string) (*model.LabellingTask, error) {
	for _, t := range r.LabellingTask {
		if t.ID == taskID {
			t.Response = &response
			return t, nil
		}
	}
	return nil, nil
}

// LabellingTask is the resolver for the labellingTask field.
func (r *queryResolver) LabellingTask(ctx context.Context, id string) (*model.LabellingTask, error) {
	for _, t := range r.Resolver.LabellingTask {
		if t.ID == id {
			return t, nil
		}
	}
	return nil, nil
}

// LabellingTasks is the resolver for the labellingTasks field.
func (r *queryResolver) LabellingTasks(ctx context.Context) ([]*model.LabellingTask, error) {
	return r.Resolver.LabellingTask, nil
}

// LabellingUserTasks is the resolver for the labellingUserTasks field.
func (r *queryResolver) LabellingUserTasks(ctx context.Context, userID string) ([]*model.LabellingTask, error) {
	var res []*model.LabellingTask
	for _, t := range r.Resolver.LabellingTask {
		if t.User.ID == userID {
			res = append(res, t)
		}
	}
	return res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
