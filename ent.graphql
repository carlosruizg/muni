directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateExpertInput is used for create Expert object.
Input was generated by ent.
"""
input CreateExpertInput {
  name: String!
  taskResponseIDs: [ID!]
  qualificationIDs: [ID!]
}
"""
CreateLabellingTaskInput is used for create LabellingTask object.
Input was generated by ent.
"""
input CreateLabellingTaskInput {
  title: String!
  description: String
  responseIDs: [ID!]
  expertRequirementIDs: [ID!]
}
"""
CreateLabellingTaskResponseInput is used for create LabellingTaskResponse object.
Input was generated by ent.
"""
input CreateLabellingTaskResponseInput {
  response: String!
  taskID: ID
  expertID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Expert implements Node {
  id: ID!
  name: String!
  taskResponses: [LabellingTaskResponse!]
  qualifications: [Qualification!]
}
type LabellingTask implements Node {
  id: ID!
  title: String!
  description: String
  responses: [LabellingTaskResponse!]
  expertRequirements: [Qualification!]
}
type LabellingTaskResponse implements Node {
  id: ID!
  response: String!
  task: LabellingTask
  expert: Expert
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/carlosruizg/muni/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Qualification implements Node {
  id: ID!
  value: QualificationQualificationValue!
  tasks: [LabellingTask!]
  experts: [Expert!]
}
"""QualificationQualificationValue is enum for the field value"""
enum QualificationQualificationValue @goModel(model: "github.com/carlosruizg/muni/ent/schema.QualificationValue") {
  CODER
  MEDICAL
  ARTIST
  STEM
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  experts: [Expert!]!
  labellingTasks: [LabellingTask!]!
  labellingTaskResponses: [LabellingTaskResponse!]!
}
"""
UpdateExpertInput is used for update Expert object.
Input was generated by ent.
"""
input UpdateExpertInput {
  name: String
  addTaskResponseIDs: [ID!]
  removeTaskResponseIDs: [ID!]
  clearTaskResponses: Boolean
  addQualificationIDs: [ID!]
  removeQualificationIDs: [ID!]
  clearQualifications: Boolean
}
