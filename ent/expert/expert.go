// Code generated by ent, DO NOT EDIT.

package expert

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the expert type in the database.
	Label = "expert"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeTaskResponses holds the string denoting the task_responses edge name in mutations.
	EdgeTaskResponses = "task_responses"
	// EdgeQualifications holds the string denoting the qualifications edge name in mutations.
	EdgeQualifications = "qualifications"
	// Table holds the table name of the expert in the database.
	Table = "experts"
	// TaskResponsesTable is the table that holds the task_responses relation/edge.
	TaskResponsesTable = "labelling_task_responses"
	// TaskResponsesInverseTable is the table name for the LabellingTaskResponse entity.
	// It exists in this package in order to avoid circular dependency with the "labellingtaskresponse" package.
	TaskResponsesInverseTable = "labelling_task_responses"
	// TaskResponsesColumn is the table column denoting the task_responses relation/edge.
	TaskResponsesColumn = "expert_task_responses"
	// QualificationsTable is the table that holds the qualifications relation/edge. The primary key declared below.
	QualificationsTable = "expert_qualifications"
	// QualificationsInverseTable is the table name for the Qualification entity.
	// It exists in this package in order to avoid circular dependency with the "qualification" package.
	QualificationsInverseTable = "qualifications"
)

// Columns holds all SQL columns for expert fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// QualificationsPrimaryKey and QualificationsColumn2 are the table columns denoting the
	// primary key for the qualifications relation (M2M).
	QualificationsPrimaryKey = []string{"expert_id", "qualification_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Expert queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTaskResponsesCount orders the results by task_responses count.
func ByTaskResponsesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskResponsesStep(), opts...)
	}
}

// ByTaskResponses orders the results by task_responses terms.
func ByTaskResponses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskResponsesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByQualificationsCount orders the results by qualifications count.
func ByQualificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQualificationsStep(), opts...)
	}
}

// ByQualifications orders the results by qualifications terms.
func ByQualifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQualificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTaskResponsesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskResponsesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TaskResponsesTable, TaskResponsesColumn),
	)
}
func newQualificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QualificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, QualificationsTable, QualificationsPrimaryKey...),
	)
}
