// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/carlosruizg/muni/ent/labellingproject"
	"github.com/carlosruizg/muni/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLabellingProject = "LabellingProject"
)

// LabellingProjectMutation represents an operation that mutates the LabellingProject nodes in the graph.
type LabellingProjectMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	status              *labellingproject.Status
	description         *string
	is_private          *bool
	callback_url        *string
	workers_per_task    *int
	addworkers_per_task *int
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*LabellingProject, error)
	predicates          []predicate.LabellingProject
}

var _ ent.Mutation = (*LabellingProjectMutation)(nil)

// labellingprojectOption allows management of the mutation configuration using functional options.
type labellingprojectOption func(*LabellingProjectMutation)

// newLabellingProjectMutation creates new mutation for the LabellingProject entity.
func newLabellingProjectMutation(c config, op Op, opts ...labellingprojectOption) *LabellingProjectMutation {
	m := &LabellingProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeLabellingProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLabellingProjectID sets the ID field of the mutation.
func withLabellingProjectID(id int) labellingprojectOption {
	return func(m *LabellingProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *LabellingProject
		)
		m.oldValue = func(ctx context.Context) (*LabellingProject, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LabellingProject.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLabellingProject sets the old LabellingProject of the mutation.
func withLabellingProject(node *LabellingProject) labellingprojectOption {
	return func(m *LabellingProjectMutation) {
		m.oldValue = func(context.Context) (*LabellingProject, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LabellingProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LabellingProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LabellingProjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LabellingProjectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LabellingProject.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *LabellingProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LabellingProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the LabellingProject entity.
// If the LabellingProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LabellingProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LabellingProjectMutation) ResetName() {
	m.name = nil
}

// SetStatus sets the "status" field.
func (m *LabellingProjectMutation) SetStatus(l labellingproject.Status) {
	m.status = &l
}

// Status returns the value of the "status" field in the mutation.
func (m *LabellingProjectMutation) Status() (r labellingproject.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the LabellingProject entity.
// If the LabellingProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LabellingProjectMutation) OldStatus(ctx context.Context) (v labellingproject.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *LabellingProjectMutation) ResetStatus() {
	m.status = nil
}

// SetDescription sets the "description" field.
func (m *LabellingProjectMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *LabellingProjectMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the LabellingProject entity.
// If the LabellingProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LabellingProjectMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *LabellingProjectMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[labellingproject.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *LabellingProjectMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[labellingproject.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *LabellingProjectMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, labellingproject.FieldDescription)
}

// SetIsPrivate sets the "is_private" field.
func (m *LabellingProjectMutation) SetIsPrivate(b bool) {
	m.is_private = &b
}

// IsPrivate returns the value of the "is_private" field in the mutation.
func (m *LabellingProjectMutation) IsPrivate() (r bool, exists bool) {
	v := m.is_private
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPrivate returns the old "is_private" field's value of the LabellingProject entity.
// If the LabellingProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LabellingProjectMutation) OldIsPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPrivate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPrivate: %w", err)
	}
	return oldValue.IsPrivate, nil
}

// ResetIsPrivate resets all changes to the "is_private" field.
func (m *LabellingProjectMutation) ResetIsPrivate() {
	m.is_private = nil
}

// SetCallbackURL sets the "callback_url" field.
func (m *LabellingProjectMutation) SetCallbackURL(s string) {
	m.callback_url = &s
}

// CallbackURL returns the value of the "callback_url" field in the mutation.
func (m *LabellingProjectMutation) CallbackURL() (r string, exists bool) {
	v := m.callback_url
	if v == nil {
		return
	}
	return *v, true
}

// OldCallbackURL returns the old "callback_url" field's value of the LabellingProject entity.
// If the LabellingProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LabellingProjectMutation) OldCallbackURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCallbackURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCallbackURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCallbackURL: %w", err)
	}
	return oldValue.CallbackURL, nil
}

// ClearCallbackURL clears the value of the "callback_url" field.
func (m *LabellingProjectMutation) ClearCallbackURL() {
	m.callback_url = nil
	m.clearedFields[labellingproject.FieldCallbackURL] = struct{}{}
}

// CallbackURLCleared returns if the "callback_url" field was cleared in this mutation.
func (m *LabellingProjectMutation) CallbackURLCleared() bool {
	_, ok := m.clearedFields[labellingproject.FieldCallbackURL]
	return ok
}

// ResetCallbackURL resets all changes to the "callback_url" field.
func (m *LabellingProjectMutation) ResetCallbackURL() {
	m.callback_url = nil
	delete(m.clearedFields, labellingproject.FieldCallbackURL)
}

// SetWorkersPerTask sets the "workers_per_task" field.
func (m *LabellingProjectMutation) SetWorkersPerTask(i int) {
	m.workers_per_task = &i
	m.addworkers_per_task = nil
}

// WorkersPerTask returns the value of the "workers_per_task" field in the mutation.
func (m *LabellingProjectMutation) WorkersPerTask() (r int, exists bool) {
	v := m.workers_per_task
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkersPerTask returns the old "workers_per_task" field's value of the LabellingProject entity.
// If the LabellingProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LabellingProjectMutation) OldWorkersPerTask(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkersPerTask is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkersPerTask requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkersPerTask: %w", err)
	}
	return oldValue.WorkersPerTask, nil
}

// AddWorkersPerTask adds i to the "workers_per_task" field.
func (m *LabellingProjectMutation) AddWorkersPerTask(i int) {
	if m.addworkers_per_task != nil {
		*m.addworkers_per_task += i
	} else {
		m.addworkers_per_task = &i
	}
}

// AddedWorkersPerTask returns the value that was added to the "workers_per_task" field in this mutation.
func (m *LabellingProjectMutation) AddedWorkersPerTask() (r int, exists bool) {
	v := m.addworkers_per_task
	if v == nil {
		return
	}
	return *v, true
}

// ResetWorkersPerTask resets all changes to the "workers_per_task" field.
func (m *LabellingProjectMutation) ResetWorkersPerTask() {
	m.workers_per_task = nil
	m.addworkers_per_task = nil
}

// Where appends a list predicates to the LabellingProjectMutation builder.
func (m *LabellingProjectMutation) Where(ps ...predicate.LabellingProject) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LabellingProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LabellingProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LabellingProject, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LabellingProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LabellingProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LabellingProject).
func (m *LabellingProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LabellingProjectMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, labellingproject.FieldName)
	}
	if m.status != nil {
		fields = append(fields, labellingproject.FieldStatus)
	}
	if m.description != nil {
		fields = append(fields, labellingproject.FieldDescription)
	}
	if m.is_private != nil {
		fields = append(fields, labellingproject.FieldIsPrivate)
	}
	if m.callback_url != nil {
		fields = append(fields, labellingproject.FieldCallbackURL)
	}
	if m.workers_per_task != nil {
		fields = append(fields, labellingproject.FieldWorkersPerTask)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LabellingProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case labellingproject.FieldName:
		return m.Name()
	case labellingproject.FieldStatus:
		return m.Status()
	case labellingproject.FieldDescription:
		return m.Description()
	case labellingproject.FieldIsPrivate:
		return m.IsPrivate()
	case labellingproject.FieldCallbackURL:
		return m.CallbackURL()
	case labellingproject.FieldWorkersPerTask:
		return m.WorkersPerTask()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LabellingProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case labellingproject.FieldName:
		return m.OldName(ctx)
	case labellingproject.FieldStatus:
		return m.OldStatus(ctx)
	case labellingproject.FieldDescription:
		return m.OldDescription(ctx)
	case labellingproject.FieldIsPrivate:
		return m.OldIsPrivate(ctx)
	case labellingproject.FieldCallbackURL:
		return m.OldCallbackURL(ctx)
	case labellingproject.FieldWorkersPerTask:
		return m.OldWorkersPerTask(ctx)
	}
	return nil, fmt.Errorf("unknown LabellingProject field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LabellingProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case labellingproject.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case labellingproject.FieldStatus:
		v, ok := value.(labellingproject.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case labellingproject.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case labellingproject.FieldIsPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPrivate(v)
		return nil
	case labellingproject.FieldCallbackURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCallbackURL(v)
		return nil
	case labellingproject.FieldWorkersPerTask:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkersPerTask(v)
		return nil
	}
	return fmt.Errorf("unknown LabellingProject field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LabellingProjectMutation) AddedFields() []string {
	var fields []string
	if m.addworkers_per_task != nil {
		fields = append(fields, labellingproject.FieldWorkersPerTask)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LabellingProjectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case labellingproject.FieldWorkersPerTask:
		return m.AddedWorkersPerTask()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LabellingProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	case labellingproject.FieldWorkersPerTask:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWorkersPerTask(v)
		return nil
	}
	return fmt.Errorf("unknown LabellingProject numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LabellingProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(labellingproject.FieldDescription) {
		fields = append(fields, labellingproject.FieldDescription)
	}
	if m.FieldCleared(labellingproject.FieldCallbackURL) {
		fields = append(fields, labellingproject.FieldCallbackURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LabellingProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LabellingProjectMutation) ClearField(name string) error {
	switch name {
	case labellingproject.FieldDescription:
		m.ClearDescription()
		return nil
	case labellingproject.FieldCallbackURL:
		m.ClearCallbackURL()
		return nil
	}
	return fmt.Errorf("unknown LabellingProject nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LabellingProjectMutation) ResetField(name string) error {
	switch name {
	case labellingproject.FieldName:
		m.ResetName()
		return nil
	case labellingproject.FieldStatus:
		m.ResetStatus()
		return nil
	case labellingproject.FieldDescription:
		m.ResetDescription()
		return nil
	case labellingproject.FieldIsPrivate:
		m.ResetIsPrivate()
		return nil
	case labellingproject.FieldCallbackURL:
		m.ResetCallbackURL()
		return nil
	case labellingproject.FieldWorkersPerTask:
		m.ResetWorkersPerTask()
		return nil
	}
	return fmt.Errorf("unknown LabellingProject field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LabellingProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LabellingProjectMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LabellingProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LabellingProjectMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LabellingProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LabellingProjectMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LabellingProjectMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown LabellingProject unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LabellingProjectMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown LabellingProject edge %s", name)
}
