// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/carlosruizg/muni/ent/labellingproject"
	"github.com/carlosruizg/muni/enums"
)

// CreateExpertInput represents a mutation input for creating experts.
type CreateExpertInput struct {
	Name string
}

// Mutate applies the CreateExpertInput on the ExpertMutation builder.
func (i *CreateExpertInput) Mutate(m *ExpertMutation) {
	m.SetName(i.Name)
}

// SetInput applies the change-set in the CreateExpertInput on the ExpertCreate builder.
func (c *ExpertCreate) SetInput(i CreateExpertInput) *ExpertCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateExpertInput represents a mutation input for updating experts.
type UpdateExpertInput struct {
	Name *string
}

// Mutate applies the UpdateExpertInput on the ExpertMutation builder.
func (i *UpdateExpertInput) Mutate(m *ExpertMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateExpertInput on the ExpertUpdate builder.
func (c *ExpertUpdate) SetInput(i UpdateExpertInput) *ExpertUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateExpertInput on the ExpertUpdateOne builder.
func (c *ExpertUpdateOne) SetInput(i UpdateExpertInput) *ExpertUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLabellingProjectInput represents a mutation input for creating labellingprojects.
type CreateLabellingProjectInput struct {
	Name           string
	Status         *labellingproject.Status
	Description    *string
	IsPrivate      *bool
	CallbackURL    *string
	WorkersPerTask *int
}

// Mutate applies the CreateLabellingProjectInput on the LabellingProjectMutation builder.
func (i *CreateLabellingProjectInput) Mutate(m *LabellingProjectMutation) {
	m.SetName(i.Name)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.IsPrivate; v != nil {
		m.SetIsPrivate(*v)
	}
	if v := i.CallbackURL; v != nil {
		m.SetCallbackURL(*v)
	}
	if v := i.WorkersPerTask; v != nil {
		m.SetWorkersPerTask(*v)
	}
}

// SetInput applies the change-set in the CreateLabellingProjectInput on the LabellingProjectCreate builder.
func (c *LabellingProjectCreate) SetInput(i CreateLabellingProjectInput) *LabellingProjectCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLabellingProjectInput represents a mutation input for updating labellingprojects.
type UpdateLabellingProjectInput struct {
	Name             *string
	Status           *labellingproject.Status
	ClearDescription bool
	Description      *string
	IsPrivate        *bool
	ClearCallbackURL bool
	CallbackURL      *string
	WorkersPerTask   *int
}

// Mutate applies the UpdateLabellingProjectInput on the LabellingProjectMutation builder.
func (i *UpdateLabellingProjectInput) Mutate(m *LabellingProjectMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.IsPrivate; v != nil {
		m.SetIsPrivate(*v)
	}
	if i.ClearCallbackURL {
		m.ClearCallbackURL()
	}
	if v := i.CallbackURL; v != nil {
		m.SetCallbackURL(*v)
	}
	if v := i.WorkersPerTask; v != nil {
		m.SetWorkersPerTask(*v)
	}
}

// SetInput applies the change-set in the UpdateLabellingProjectInput on the LabellingProjectUpdate builder.
func (c *LabellingProjectUpdate) SetInput(i UpdateLabellingProjectInput) *LabellingProjectUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLabellingProjectInput on the LabellingProjectUpdateOne builder.
func (c *LabellingProjectUpdateOne) SetInput(i UpdateLabellingProjectInput) *LabellingProjectUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLabellingTaskInput represents a mutation input for creating labellingtasks.
type CreateLabellingTaskInput struct {
	Name         string
	Description  *string
	Instructions string
}

// Mutate applies the CreateLabellingTaskInput on the LabellingTaskMutation builder.
func (i *CreateLabellingTaskInput) Mutate(m *LabellingTaskMutation) {
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	m.SetInstructions(i.Instructions)
}

// SetInput applies the change-set in the CreateLabellingTaskInput on the LabellingTaskCreate builder.
func (c *LabellingTaskCreate) SetInput(i CreateLabellingTaskInput) *LabellingTaskCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLabellingTaskInput represents a mutation input for updating labellingtasks.
type UpdateLabellingTaskInput struct {
	Name             *string
	ClearDescription bool
	Description      *string
	Instructions     *string
}

// Mutate applies the UpdateLabellingTaskInput on the LabellingTaskMutation builder.
func (i *UpdateLabellingTaskInput) Mutate(m *LabellingTaskMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Instructions; v != nil {
		m.SetInstructions(*v)
	}
}

// SetInput applies the change-set in the UpdateLabellingTaskInput on the LabellingTaskUpdate builder.
func (c *LabellingTaskUpdate) SetInput(i UpdateLabellingTaskInput) *LabellingTaskUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLabellingTaskInput on the LabellingTaskUpdateOne builder.
func (c *LabellingTaskUpdateOne) SetInput(i UpdateLabellingTaskInput) *LabellingTaskUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLabellingTaskResponseInput represents a mutation input for creating labellingtaskresponses.
type CreateLabellingTaskResponseInput struct {
	Response string
}

// Mutate applies the CreateLabellingTaskResponseInput on the LabellingTaskResponseMutation builder.
func (i *CreateLabellingTaskResponseInput) Mutate(m *LabellingTaskResponseMutation) {
	m.SetResponse(i.Response)
}

// SetInput applies the change-set in the CreateLabellingTaskResponseInput on the LabellingTaskResponseCreate builder.
func (c *LabellingTaskResponseCreate) SetInput(i CreateLabellingTaskResponseInput) *LabellingTaskResponseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLabellingTaskResponseInput represents a mutation input for updating labellingtaskresponses.
type UpdateLabellingTaskResponseInput struct {
	Response *string
}

// Mutate applies the UpdateLabellingTaskResponseInput on the LabellingTaskResponseMutation builder.
func (i *UpdateLabellingTaskResponseInput) Mutate(m *LabellingTaskResponseMutation) {
	if v := i.Response; v != nil {
		m.SetResponse(*v)
	}
}

// SetInput applies the change-set in the UpdateLabellingTaskResponseInput on the LabellingTaskResponseUpdate builder.
func (c *LabellingTaskResponseUpdate) SetInput(i UpdateLabellingTaskResponseInput) *LabellingTaskResponseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLabellingTaskResponseInput on the LabellingTaskResponseUpdateOne builder.
func (c *LabellingTaskResponseUpdateOne) SetInput(i UpdateLabellingTaskResponseInput) *LabellingTaskResponseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateQualificationInput represents a mutation input for creating qualifications.
type CreateQualificationInput struct {
	Value enums.QualificationValue
}

// Mutate applies the CreateQualificationInput on the QualificationMutation builder.
func (i *CreateQualificationInput) Mutate(m *QualificationMutation) {
	m.SetValue(i.Value)
}

// SetInput applies the change-set in the CreateQualificationInput on the QualificationCreate builder.
func (c *QualificationCreate) SetInput(i CreateQualificationInput) *QualificationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateQualificationInput represents a mutation input for updating qualifications.
type UpdateQualificationInput struct {
	Value *enums.QualificationValue
}

// Mutate applies the UpdateQualificationInput on the QualificationMutation builder.
func (i *UpdateQualificationInput) Mutate(m *QualificationMutation) {
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
}

// SetInput applies the change-set in the UpdateQualificationInput on the QualificationUpdate builder.
func (c *QualificationUpdate) SetInput(i UpdateQualificationInput) *QualificationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateQualificationInput on the QualificationUpdateOne builder.
func (c *QualificationUpdateOne) SetInput(i UpdateQualificationInput) *QualificationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
