// Code generated by ent, DO NOT EDIT.

package ent

// CreateExpertInput represents a mutation input for creating experts.
type CreateExpertInput struct {
	Name             string
	TaskResponseIDs  []int
	QualificationIDs []int
}

// Mutate applies the CreateExpertInput on the ExpertMutation builder.
func (i *CreateExpertInput) Mutate(m *ExpertMutation) {
	m.SetName(i.Name)
	if v := i.TaskResponseIDs; len(v) > 0 {
		m.AddTaskResponseIDs(v...)
	}
	if v := i.QualificationIDs; len(v) > 0 {
		m.AddQualificationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateExpertInput on the ExpertCreate builder.
func (c *ExpertCreate) SetInput(i CreateExpertInput) *ExpertCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateExpertInput represents a mutation input for updating experts.
type UpdateExpertInput struct {
	Name                   *string
	ClearTaskResponses     bool
	AddTaskResponseIDs     []int
	RemoveTaskResponseIDs  []int
	ClearQualifications    bool
	AddQualificationIDs    []int
	RemoveQualificationIDs []int
}

// Mutate applies the UpdateExpertInput on the ExpertMutation builder.
func (i *UpdateExpertInput) Mutate(m *ExpertMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearTaskResponses {
		m.ClearTaskResponses()
	}
	if v := i.AddTaskResponseIDs; len(v) > 0 {
		m.AddTaskResponseIDs(v...)
	}
	if v := i.RemoveTaskResponseIDs; len(v) > 0 {
		m.RemoveTaskResponseIDs(v...)
	}
	if i.ClearQualifications {
		m.ClearQualifications()
	}
	if v := i.AddQualificationIDs; len(v) > 0 {
		m.AddQualificationIDs(v...)
	}
	if v := i.RemoveQualificationIDs; len(v) > 0 {
		m.RemoveQualificationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateExpertInput on the ExpertUpdate builder.
func (c *ExpertUpdate) SetInput(i UpdateExpertInput) *ExpertUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateExpertInput on the ExpertUpdateOne builder.
func (c *ExpertUpdateOne) SetInput(i UpdateExpertInput) *ExpertUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLabellingTaskInput represents a mutation input for creating labellingtasks.
type CreateLabellingTaskInput struct {
	Title                 string
	Description           *string
	QualificationRequired bool
	CallbackURL           *string
	ResponseIDs           []int
	ExpertRequirementIDs  []int
}

// Mutate applies the CreateLabellingTaskInput on the LabellingTaskMutation builder.
func (i *CreateLabellingTaskInput) Mutate(m *LabellingTaskMutation) {
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	m.SetQualificationRequired(i.QualificationRequired)
	if v := i.CallbackURL; v != nil {
		m.SetCallbackURL(*v)
	}
	if v := i.ResponseIDs; len(v) > 0 {
		m.AddResponseIDs(v...)
	}
	if v := i.ExpertRequirementIDs; len(v) > 0 {
		m.AddExpertRequirementIDs(v...)
	}
}

// SetInput applies the change-set in the CreateLabellingTaskInput on the LabellingTaskCreate builder.
func (c *LabellingTaskCreate) SetInput(i CreateLabellingTaskInput) *LabellingTaskCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLabellingTaskInput represents a mutation input for updating labellingtasks.
type UpdateLabellingTaskInput struct {
	Title                      *string
	ClearDescription           bool
	Description                *string
	QualificationRequired      *bool
	ClearCallbackURL           bool
	CallbackURL                *string
	ClearResponses             bool
	AddResponseIDs             []int
	RemoveResponseIDs          []int
	ClearExpertRequirements    bool
	AddExpertRequirementIDs    []int
	RemoveExpertRequirementIDs []int
}

// Mutate applies the UpdateLabellingTaskInput on the LabellingTaskMutation builder.
func (i *UpdateLabellingTaskInput) Mutate(m *LabellingTaskMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.QualificationRequired; v != nil {
		m.SetQualificationRequired(*v)
	}
	if i.ClearCallbackURL {
		m.ClearCallbackURL()
	}
	if v := i.CallbackURL; v != nil {
		m.SetCallbackURL(*v)
	}
	if i.ClearResponses {
		m.ClearResponses()
	}
	if v := i.AddResponseIDs; len(v) > 0 {
		m.AddResponseIDs(v...)
	}
	if v := i.RemoveResponseIDs; len(v) > 0 {
		m.RemoveResponseIDs(v...)
	}
	if i.ClearExpertRequirements {
		m.ClearExpertRequirements()
	}
	if v := i.AddExpertRequirementIDs; len(v) > 0 {
		m.AddExpertRequirementIDs(v...)
	}
	if v := i.RemoveExpertRequirementIDs; len(v) > 0 {
		m.RemoveExpertRequirementIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateLabellingTaskInput on the LabellingTaskUpdate builder.
func (c *LabellingTaskUpdate) SetInput(i UpdateLabellingTaskInput) *LabellingTaskUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLabellingTaskInput on the LabellingTaskUpdateOne builder.
func (c *LabellingTaskUpdateOne) SetInput(i UpdateLabellingTaskInput) *LabellingTaskUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLabellingTaskResponseInput represents a mutation input for creating labellingtaskresponses.
type CreateLabellingTaskResponseInput struct {
	Response string
	TaskID   *int
	ExpertID *int
}

// Mutate applies the CreateLabellingTaskResponseInput on the LabellingTaskResponseMutation builder.
func (i *CreateLabellingTaskResponseInput) Mutate(m *LabellingTaskResponseMutation) {
	m.SetResponse(i.Response)
	if v := i.TaskID; v != nil {
		m.SetTaskID(*v)
	}
	if v := i.ExpertID; v != nil {
		m.SetExpertID(*v)
	}
}

// SetInput applies the change-set in the CreateLabellingTaskResponseInput on the LabellingTaskResponseCreate builder.
func (c *LabellingTaskResponseCreate) SetInput(i CreateLabellingTaskResponseInput) *LabellingTaskResponseCreate {
	i.Mutate(c.Mutation())
	return c
}
