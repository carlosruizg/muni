// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carlosruizg/muni/ent/labellingtask"
	"github.com/carlosruizg/muni/ent/labellingtaskresponse"
	"github.com/carlosruizg/muni/ent/predicate"
)

// LabellingTaskResponseQuery is the builder for querying LabellingTaskResponse entities.
type LabellingTaskResponseQuery struct {
	config
	ctx        *QueryContext
	order      []labellingtaskresponse.OrderOption
	inters     []Interceptor
	predicates []predicate.LabellingTaskResponse
	withTask   *LabellingTaskQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*LabellingTaskResponse) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LabellingTaskResponseQuery builder.
func (ltrq *LabellingTaskResponseQuery) Where(ps ...predicate.LabellingTaskResponse) *LabellingTaskResponseQuery {
	ltrq.predicates = append(ltrq.predicates, ps...)
	return ltrq
}

// Limit the number of records to be returned by this query.
func (ltrq *LabellingTaskResponseQuery) Limit(limit int) *LabellingTaskResponseQuery {
	ltrq.ctx.Limit = &limit
	return ltrq
}

// Offset to start from.
func (ltrq *LabellingTaskResponseQuery) Offset(offset int) *LabellingTaskResponseQuery {
	ltrq.ctx.Offset = &offset
	return ltrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ltrq *LabellingTaskResponseQuery) Unique(unique bool) *LabellingTaskResponseQuery {
	ltrq.ctx.Unique = &unique
	return ltrq
}

// Order specifies how the records should be ordered.
func (ltrq *LabellingTaskResponseQuery) Order(o ...labellingtaskresponse.OrderOption) *LabellingTaskResponseQuery {
	ltrq.order = append(ltrq.order, o...)
	return ltrq
}

// QueryTask chains the current query on the "task" edge.
func (ltrq *LabellingTaskResponseQuery) QueryTask() *LabellingTaskQuery {
	query := (&LabellingTaskClient{config: ltrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ltrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ltrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(labellingtaskresponse.Table, labellingtaskresponse.FieldID, selector),
			sqlgraph.To(labellingtask.Table, labellingtask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, labellingtaskresponse.TaskTable, labellingtaskresponse.TaskColumn),
		)
		fromU = sqlgraph.SetNeighbors(ltrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LabellingTaskResponse entity from the query.
// Returns a *NotFoundError when no LabellingTaskResponse was found.
func (ltrq *LabellingTaskResponseQuery) First(ctx context.Context) (*LabellingTaskResponse, error) {
	nodes, err := ltrq.Limit(1).All(setContextOp(ctx, ltrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{labellingtaskresponse.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ltrq *LabellingTaskResponseQuery) FirstX(ctx context.Context) *LabellingTaskResponse {
	node, err := ltrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LabellingTaskResponse ID from the query.
// Returns a *NotFoundError when no LabellingTaskResponse ID was found.
func (ltrq *LabellingTaskResponseQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ltrq.Limit(1).IDs(setContextOp(ctx, ltrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{labellingtaskresponse.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ltrq *LabellingTaskResponseQuery) FirstIDX(ctx context.Context) int {
	id, err := ltrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LabellingTaskResponse entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LabellingTaskResponse entity is found.
// Returns a *NotFoundError when no LabellingTaskResponse entities are found.
func (ltrq *LabellingTaskResponseQuery) Only(ctx context.Context) (*LabellingTaskResponse, error) {
	nodes, err := ltrq.Limit(2).All(setContextOp(ctx, ltrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{labellingtaskresponse.Label}
	default:
		return nil, &NotSingularError{labellingtaskresponse.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ltrq *LabellingTaskResponseQuery) OnlyX(ctx context.Context) *LabellingTaskResponse {
	node, err := ltrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LabellingTaskResponse ID in the query.
// Returns a *NotSingularError when more than one LabellingTaskResponse ID is found.
// Returns a *NotFoundError when no entities are found.
func (ltrq *LabellingTaskResponseQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ltrq.Limit(2).IDs(setContextOp(ctx, ltrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{labellingtaskresponse.Label}
	default:
		err = &NotSingularError{labellingtaskresponse.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ltrq *LabellingTaskResponseQuery) OnlyIDX(ctx context.Context) int {
	id, err := ltrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LabellingTaskResponses.
func (ltrq *LabellingTaskResponseQuery) All(ctx context.Context) ([]*LabellingTaskResponse, error) {
	ctx = setContextOp(ctx, ltrq.ctx, "All")
	if err := ltrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LabellingTaskResponse, *LabellingTaskResponseQuery]()
	return withInterceptors[[]*LabellingTaskResponse](ctx, ltrq, qr, ltrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ltrq *LabellingTaskResponseQuery) AllX(ctx context.Context) []*LabellingTaskResponse {
	nodes, err := ltrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LabellingTaskResponse IDs.
func (ltrq *LabellingTaskResponseQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ltrq.ctx.Unique == nil && ltrq.path != nil {
		ltrq.Unique(true)
	}
	ctx = setContextOp(ctx, ltrq.ctx, "IDs")
	if err = ltrq.Select(labellingtaskresponse.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ltrq *LabellingTaskResponseQuery) IDsX(ctx context.Context) []int {
	ids, err := ltrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ltrq *LabellingTaskResponseQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ltrq.ctx, "Count")
	if err := ltrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ltrq, querierCount[*LabellingTaskResponseQuery](), ltrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ltrq *LabellingTaskResponseQuery) CountX(ctx context.Context) int {
	count, err := ltrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ltrq *LabellingTaskResponseQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ltrq.ctx, "Exist")
	switch _, err := ltrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ltrq *LabellingTaskResponseQuery) ExistX(ctx context.Context) bool {
	exist, err := ltrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LabellingTaskResponseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ltrq *LabellingTaskResponseQuery) Clone() *LabellingTaskResponseQuery {
	if ltrq == nil {
		return nil
	}
	return &LabellingTaskResponseQuery{
		config:     ltrq.config,
		ctx:        ltrq.ctx.Clone(),
		order:      append([]labellingtaskresponse.OrderOption{}, ltrq.order...),
		inters:     append([]Interceptor{}, ltrq.inters...),
		predicates: append([]predicate.LabellingTaskResponse{}, ltrq.predicates...),
		withTask:   ltrq.withTask.Clone(),
		// clone intermediate query.
		sql:  ltrq.sql.Clone(),
		path: ltrq.path,
	}
}

// WithTask tells the query-builder to eager-load the nodes that are connected to
// the "task" edge. The optional arguments are used to configure the query builder of the edge.
func (ltrq *LabellingTaskResponseQuery) WithTask(opts ...func(*LabellingTaskQuery)) *LabellingTaskResponseQuery {
	query := (&LabellingTaskClient{config: ltrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ltrq.withTask = query
	return ltrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Response string `json:"response,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LabellingTaskResponse.Query().
//		GroupBy(labellingtaskresponse.FieldResponse).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ltrq *LabellingTaskResponseQuery) GroupBy(field string, fields ...string) *LabellingTaskResponseGroupBy {
	ltrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LabellingTaskResponseGroupBy{build: ltrq}
	grbuild.flds = &ltrq.ctx.Fields
	grbuild.label = labellingtaskresponse.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Response string `json:"response,omitempty"`
//	}
//
//	client.LabellingTaskResponse.Query().
//		Select(labellingtaskresponse.FieldResponse).
//		Scan(ctx, &v)
func (ltrq *LabellingTaskResponseQuery) Select(fields ...string) *LabellingTaskResponseSelect {
	ltrq.ctx.Fields = append(ltrq.ctx.Fields, fields...)
	sbuild := &LabellingTaskResponseSelect{LabellingTaskResponseQuery: ltrq}
	sbuild.label = labellingtaskresponse.Label
	sbuild.flds, sbuild.scan = &ltrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LabellingTaskResponseSelect configured with the given aggregations.
func (ltrq *LabellingTaskResponseQuery) Aggregate(fns ...AggregateFunc) *LabellingTaskResponseSelect {
	return ltrq.Select().Aggregate(fns...)
}

func (ltrq *LabellingTaskResponseQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ltrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ltrq); err != nil {
				return err
			}
		}
	}
	for _, f := range ltrq.ctx.Fields {
		if !labellingtaskresponse.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ltrq.path != nil {
		prev, err := ltrq.path(ctx)
		if err != nil {
			return err
		}
		ltrq.sql = prev
	}
	return nil
}

func (ltrq *LabellingTaskResponseQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LabellingTaskResponse, error) {
	var (
		nodes       = []*LabellingTaskResponse{}
		withFKs     = ltrq.withFKs
		_spec       = ltrq.querySpec()
		loadedTypes = [1]bool{
			ltrq.withTask != nil,
		}
	)
	if ltrq.withTask != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, labellingtaskresponse.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LabellingTaskResponse).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LabellingTaskResponse{config: ltrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ltrq.modifiers) > 0 {
		_spec.Modifiers = ltrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ltrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ltrq.withTask; query != nil {
		if err := ltrq.loadTask(ctx, query, nodes, nil,
			func(n *LabellingTaskResponse, e *LabellingTask) { n.Edges.Task = e }); err != nil {
			return nil, err
		}
	}
	for i := range ltrq.loadTotal {
		if err := ltrq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ltrq *LabellingTaskResponseQuery) loadTask(ctx context.Context, query *LabellingTaskQuery, nodes []*LabellingTaskResponse, init func(*LabellingTaskResponse), assign func(*LabellingTaskResponse, *LabellingTask)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*LabellingTaskResponse)
	for i := range nodes {
		if nodes[i].labelling_task_responses == nil {
			continue
		}
		fk := *nodes[i].labelling_task_responses
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(labellingtask.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "labelling_task_responses" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ltrq *LabellingTaskResponseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ltrq.querySpec()
	if len(ltrq.modifiers) > 0 {
		_spec.Modifiers = ltrq.modifiers
	}
	_spec.Node.Columns = ltrq.ctx.Fields
	if len(ltrq.ctx.Fields) > 0 {
		_spec.Unique = ltrq.ctx.Unique != nil && *ltrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ltrq.driver, _spec)
}

func (ltrq *LabellingTaskResponseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(labellingtaskresponse.Table, labellingtaskresponse.Columns, sqlgraph.NewFieldSpec(labellingtaskresponse.FieldID, field.TypeInt))
	_spec.From = ltrq.sql
	if unique := ltrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ltrq.path != nil {
		_spec.Unique = true
	}
	if fields := ltrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, labellingtaskresponse.FieldID)
		for i := range fields {
			if fields[i] != labellingtaskresponse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ltrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ltrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ltrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ltrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ltrq *LabellingTaskResponseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ltrq.driver.Dialect())
	t1 := builder.Table(labellingtaskresponse.Table)
	columns := ltrq.ctx.Fields
	if len(columns) == 0 {
		columns = labellingtaskresponse.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ltrq.sql != nil {
		selector = ltrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ltrq.ctx.Unique != nil && *ltrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ltrq.predicates {
		p(selector)
	}
	for _, p := range ltrq.order {
		p(selector)
	}
	if offset := ltrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ltrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LabellingTaskResponseGroupBy is the group-by builder for LabellingTaskResponse entities.
type LabellingTaskResponseGroupBy struct {
	selector
	build *LabellingTaskResponseQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ltrgb *LabellingTaskResponseGroupBy) Aggregate(fns ...AggregateFunc) *LabellingTaskResponseGroupBy {
	ltrgb.fns = append(ltrgb.fns, fns...)
	return ltrgb
}

// Scan applies the selector query and scans the result into the given value.
func (ltrgb *LabellingTaskResponseGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ltrgb.build.ctx, "GroupBy")
	if err := ltrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LabellingTaskResponseQuery, *LabellingTaskResponseGroupBy](ctx, ltrgb.build, ltrgb, ltrgb.build.inters, v)
}

func (ltrgb *LabellingTaskResponseGroupBy) sqlScan(ctx context.Context, root *LabellingTaskResponseQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ltrgb.fns))
	for _, fn := range ltrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ltrgb.flds)+len(ltrgb.fns))
		for _, f := range *ltrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ltrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ltrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LabellingTaskResponseSelect is the builder for selecting fields of LabellingTaskResponse entities.
type LabellingTaskResponseSelect struct {
	*LabellingTaskResponseQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ltrs *LabellingTaskResponseSelect) Aggregate(fns ...AggregateFunc) *LabellingTaskResponseSelect {
	ltrs.fns = append(ltrs.fns, fns...)
	return ltrs
}

// Scan applies the selector query and scans the result into the given value.
func (ltrs *LabellingTaskResponseSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ltrs.ctx, "Select")
	if err := ltrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LabellingTaskResponseQuery, *LabellingTaskResponseSelect](ctx, ltrs.LabellingTaskResponseQuery, ltrs, ltrs.inters, v)
}

func (ltrs *LabellingTaskResponseSelect) sqlScan(ctx context.Context, root *LabellingTaskResponseQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ltrs.fns))
	for _, fn := range ltrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ltrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ltrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
