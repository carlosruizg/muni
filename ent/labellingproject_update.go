// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carlosruizg/muni/ent/labellingproject"
	"github.com/carlosruizg/muni/ent/predicate"
)

// LabellingProjectUpdate is the builder for updating LabellingProject entities.
type LabellingProjectUpdate struct {
	config
	hooks    []Hook
	mutation *LabellingProjectMutation
}

// Where appends a list predicates to the LabellingProjectUpdate builder.
func (lpu *LabellingProjectUpdate) Where(ps ...predicate.LabellingProject) *LabellingProjectUpdate {
	lpu.mutation.Where(ps...)
	return lpu
}

// SetName sets the "name" field.
func (lpu *LabellingProjectUpdate) SetName(s string) *LabellingProjectUpdate {
	lpu.mutation.SetName(s)
	return lpu
}

// SetStatus sets the "status" field.
func (lpu *LabellingProjectUpdate) SetStatus(l labellingproject.Status) *LabellingProjectUpdate {
	lpu.mutation.SetStatus(l)
	return lpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lpu *LabellingProjectUpdate) SetNillableStatus(l *labellingproject.Status) *LabellingProjectUpdate {
	if l != nil {
		lpu.SetStatus(*l)
	}
	return lpu
}

// SetDescription sets the "description" field.
func (lpu *LabellingProjectUpdate) SetDescription(s string) *LabellingProjectUpdate {
	lpu.mutation.SetDescription(s)
	return lpu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lpu *LabellingProjectUpdate) SetNillableDescription(s *string) *LabellingProjectUpdate {
	if s != nil {
		lpu.SetDescription(*s)
	}
	return lpu
}

// ClearDescription clears the value of the "description" field.
func (lpu *LabellingProjectUpdate) ClearDescription() *LabellingProjectUpdate {
	lpu.mutation.ClearDescription()
	return lpu
}

// SetIsPrivate sets the "is_private" field.
func (lpu *LabellingProjectUpdate) SetIsPrivate(b bool) *LabellingProjectUpdate {
	lpu.mutation.SetIsPrivate(b)
	return lpu
}

// SetNillableIsPrivate sets the "is_private" field if the given value is not nil.
func (lpu *LabellingProjectUpdate) SetNillableIsPrivate(b *bool) *LabellingProjectUpdate {
	if b != nil {
		lpu.SetIsPrivate(*b)
	}
	return lpu
}

// SetCallbackURL sets the "callback_url" field.
func (lpu *LabellingProjectUpdate) SetCallbackURL(s string) *LabellingProjectUpdate {
	lpu.mutation.SetCallbackURL(s)
	return lpu
}

// SetNillableCallbackURL sets the "callback_url" field if the given value is not nil.
func (lpu *LabellingProjectUpdate) SetNillableCallbackURL(s *string) *LabellingProjectUpdate {
	if s != nil {
		lpu.SetCallbackURL(*s)
	}
	return lpu
}

// ClearCallbackURL clears the value of the "callback_url" field.
func (lpu *LabellingProjectUpdate) ClearCallbackURL() *LabellingProjectUpdate {
	lpu.mutation.ClearCallbackURL()
	return lpu
}

// SetWorkersPerTask sets the "workers_per_task" field.
func (lpu *LabellingProjectUpdate) SetWorkersPerTask(i int) *LabellingProjectUpdate {
	lpu.mutation.ResetWorkersPerTask()
	lpu.mutation.SetWorkersPerTask(i)
	return lpu
}

// SetNillableWorkersPerTask sets the "workers_per_task" field if the given value is not nil.
func (lpu *LabellingProjectUpdate) SetNillableWorkersPerTask(i *int) *LabellingProjectUpdate {
	if i != nil {
		lpu.SetWorkersPerTask(*i)
	}
	return lpu
}

// AddWorkersPerTask adds i to the "workers_per_task" field.
func (lpu *LabellingProjectUpdate) AddWorkersPerTask(i int) *LabellingProjectUpdate {
	lpu.mutation.AddWorkersPerTask(i)
	return lpu
}

// Mutation returns the LabellingProjectMutation object of the builder.
func (lpu *LabellingProjectUpdate) Mutation() *LabellingProjectMutation {
	return lpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lpu *LabellingProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lpu.sqlSave, lpu.mutation, lpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpu *LabellingProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := lpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lpu *LabellingProjectUpdate) Exec(ctx context.Context) error {
	_, err := lpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpu *LabellingProjectUpdate) ExecX(ctx context.Context) {
	if err := lpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpu *LabellingProjectUpdate) check() error {
	if v, ok := lpu.mutation.Name(); ok {
		if err := labellingproject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "LabellingProject.name": %w`, err)}
		}
	}
	if v, ok := lpu.mutation.Status(); ok {
		if err := labellingproject.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LabellingProject.status": %w`, err)}
		}
	}
	return nil
}

func (lpu *LabellingProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(labellingproject.Table, labellingproject.Columns, sqlgraph.NewFieldSpec(labellingproject.FieldID, field.TypeInt))
	if ps := lpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpu.mutation.Name(); ok {
		_spec.SetField(labellingproject.FieldName, field.TypeString, value)
	}
	if value, ok := lpu.mutation.Status(); ok {
		_spec.SetField(labellingproject.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := lpu.mutation.Description(); ok {
		_spec.SetField(labellingproject.FieldDescription, field.TypeString, value)
	}
	if lpu.mutation.DescriptionCleared() {
		_spec.ClearField(labellingproject.FieldDescription, field.TypeString)
	}
	if value, ok := lpu.mutation.IsPrivate(); ok {
		_spec.SetField(labellingproject.FieldIsPrivate, field.TypeBool, value)
	}
	if value, ok := lpu.mutation.CallbackURL(); ok {
		_spec.SetField(labellingproject.FieldCallbackURL, field.TypeString, value)
	}
	if lpu.mutation.CallbackURLCleared() {
		_spec.ClearField(labellingproject.FieldCallbackURL, field.TypeString)
	}
	if value, ok := lpu.mutation.WorkersPerTask(); ok {
		_spec.SetField(labellingproject.FieldWorkersPerTask, field.TypeInt, value)
	}
	if value, ok := lpu.mutation.AddedWorkersPerTask(); ok {
		_spec.AddField(labellingproject.FieldWorkersPerTask, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{labellingproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lpu.mutation.done = true
	return n, nil
}

// LabellingProjectUpdateOne is the builder for updating a single LabellingProject entity.
type LabellingProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LabellingProjectMutation
}

// SetName sets the "name" field.
func (lpuo *LabellingProjectUpdateOne) SetName(s string) *LabellingProjectUpdateOne {
	lpuo.mutation.SetName(s)
	return lpuo
}

// SetStatus sets the "status" field.
func (lpuo *LabellingProjectUpdateOne) SetStatus(l labellingproject.Status) *LabellingProjectUpdateOne {
	lpuo.mutation.SetStatus(l)
	return lpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lpuo *LabellingProjectUpdateOne) SetNillableStatus(l *labellingproject.Status) *LabellingProjectUpdateOne {
	if l != nil {
		lpuo.SetStatus(*l)
	}
	return lpuo
}

// SetDescription sets the "description" field.
func (lpuo *LabellingProjectUpdateOne) SetDescription(s string) *LabellingProjectUpdateOne {
	lpuo.mutation.SetDescription(s)
	return lpuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lpuo *LabellingProjectUpdateOne) SetNillableDescription(s *string) *LabellingProjectUpdateOne {
	if s != nil {
		lpuo.SetDescription(*s)
	}
	return lpuo
}

// ClearDescription clears the value of the "description" field.
func (lpuo *LabellingProjectUpdateOne) ClearDescription() *LabellingProjectUpdateOne {
	lpuo.mutation.ClearDescription()
	return lpuo
}

// SetIsPrivate sets the "is_private" field.
func (lpuo *LabellingProjectUpdateOne) SetIsPrivate(b bool) *LabellingProjectUpdateOne {
	lpuo.mutation.SetIsPrivate(b)
	return lpuo
}

// SetNillableIsPrivate sets the "is_private" field if the given value is not nil.
func (lpuo *LabellingProjectUpdateOne) SetNillableIsPrivate(b *bool) *LabellingProjectUpdateOne {
	if b != nil {
		lpuo.SetIsPrivate(*b)
	}
	return lpuo
}

// SetCallbackURL sets the "callback_url" field.
func (lpuo *LabellingProjectUpdateOne) SetCallbackURL(s string) *LabellingProjectUpdateOne {
	lpuo.mutation.SetCallbackURL(s)
	return lpuo
}

// SetNillableCallbackURL sets the "callback_url" field if the given value is not nil.
func (lpuo *LabellingProjectUpdateOne) SetNillableCallbackURL(s *string) *LabellingProjectUpdateOne {
	if s != nil {
		lpuo.SetCallbackURL(*s)
	}
	return lpuo
}

// ClearCallbackURL clears the value of the "callback_url" field.
func (lpuo *LabellingProjectUpdateOne) ClearCallbackURL() *LabellingProjectUpdateOne {
	lpuo.mutation.ClearCallbackURL()
	return lpuo
}

// SetWorkersPerTask sets the "workers_per_task" field.
func (lpuo *LabellingProjectUpdateOne) SetWorkersPerTask(i int) *LabellingProjectUpdateOne {
	lpuo.mutation.ResetWorkersPerTask()
	lpuo.mutation.SetWorkersPerTask(i)
	return lpuo
}

// SetNillableWorkersPerTask sets the "workers_per_task" field if the given value is not nil.
func (lpuo *LabellingProjectUpdateOne) SetNillableWorkersPerTask(i *int) *LabellingProjectUpdateOne {
	if i != nil {
		lpuo.SetWorkersPerTask(*i)
	}
	return lpuo
}

// AddWorkersPerTask adds i to the "workers_per_task" field.
func (lpuo *LabellingProjectUpdateOne) AddWorkersPerTask(i int) *LabellingProjectUpdateOne {
	lpuo.mutation.AddWorkersPerTask(i)
	return lpuo
}

// Mutation returns the LabellingProjectMutation object of the builder.
func (lpuo *LabellingProjectUpdateOne) Mutation() *LabellingProjectMutation {
	return lpuo.mutation
}

// Where appends a list predicates to the LabellingProjectUpdate builder.
func (lpuo *LabellingProjectUpdateOne) Where(ps ...predicate.LabellingProject) *LabellingProjectUpdateOne {
	lpuo.mutation.Where(ps...)
	return lpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lpuo *LabellingProjectUpdateOne) Select(field string, fields ...string) *LabellingProjectUpdateOne {
	lpuo.fields = append([]string{field}, fields...)
	return lpuo
}

// Save executes the query and returns the updated LabellingProject entity.
func (lpuo *LabellingProjectUpdateOne) Save(ctx context.Context) (*LabellingProject, error) {
	return withHooks(ctx, lpuo.sqlSave, lpuo.mutation, lpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpuo *LabellingProjectUpdateOne) SaveX(ctx context.Context) *LabellingProject {
	node, err := lpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lpuo *LabellingProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := lpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpuo *LabellingProjectUpdateOne) ExecX(ctx context.Context) {
	if err := lpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpuo *LabellingProjectUpdateOne) check() error {
	if v, ok := lpuo.mutation.Name(); ok {
		if err := labellingproject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "LabellingProject.name": %w`, err)}
		}
	}
	if v, ok := lpuo.mutation.Status(); ok {
		if err := labellingproject.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LabellingProject.status": %w`, err)}
		}
	}
	return nil
}

func (lpuo *LabellingProjectUpdateOne) sqlSave(ctx context.Context) (_node *LabellingProject, err error) {
	if err := lpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(labellingproject.Table, labellingproject.Columns, sqlgraph.NewFieldSpec(labellingproject.FieldID, field.TypeInt))
	id, ok := lpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LabellingProject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, labellingproject.FieldID)
		for _, f := range fields {
			if !labellingproject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != labellingproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpuo.mutation.Name(); ok {
		_spec.SetField(labellingproject.FieldName, field.TypeString, value)
	}
	if value, ok := lpuo.mutation.Status(); ok {
		_spec.SetField(labellingproject.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := lpuo.mutation.Description(); ok {
		_spec.SetField(labellingproject.FieldDescription, field.TypeString, value)
	}
	if lpuo.mutation.DescriptionCleared() {
		_spec.ClearField(labellingproject.FieldDescription, field.TypeString)
	}
	if value, ok := lpuo.mutation.IsPrivate(); ok {
		_spec.SetField(labellingproject.FieldIsPrivate, field.TypeBool, value)
	}
	if value, ok := lpuo.mutation.CallbackURL(); ok {
		_spec.SetField(labellingproject.FieldCallbackURL, field.TypeString, value)
	}
	if lpuo.mutation.CallbackURLCleared() {
		_spec.ClearField(labellingproject.FieldCallbackURL, field.TypeString)
	}
	if value, ok := lpuo.mutation.WorkersPerTask(); ok {
		_spec.SetField(labellingproject.FieldWorkersPerTask, field.TypeInt, value)
	}
	if value, ok := lpuo.mutation.AddedWorkersPerTask(); ok {
		_spec.AddField(labellingproject.FieldWorkersPerTask, field.TypeInt, value)
	}
	_node = &LabellingProject{config: lpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{labellingproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lpuo.mutation.done = true
	return _node, nil
}
