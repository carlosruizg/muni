// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (e *Expert) TaskResponses(ctx context.Context) (result []*LabellingTaskResponse, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedTaskResponses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.TaskResponsesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryTaskResponses().All(ctx)
	}
	return result, err
}

func (e *Expert) Qualifications(ctx context.Context) (result []*Qualification, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedQualifications(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.QualificationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryQualifications().All(ctx)
	}
	return result, err
}

func (lt *LabellingTask) Responses(ctx context.Context) (result []*LabellingTaskResponse, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = lt.NamedResponses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = lt.Edges.ResponsesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = lt.QueryResponses().All(ctx)
	}
	return result, err
}

func (lt *LabellingTask) ExpertRequirements(ctx context.Context) (result []*Qualification, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = lt.NamedExpertRequirements(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = lt.Edges.ExpertRequirementsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = lt.QueryExpertRequirements().All(ctx)
	}
	return result, err
}

func (ltr *LabellingTaskResponse) Task(ctx context.Context) (*LabellingTask, error) {
	result, err := ltr.Edges.TaskOrErr()
	if IsNotLoaded(err) {
		result, err = ltr.QueryTask().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ltr *LabellingTaskResponse) Expert(ctx context.Context) (*Expert, error) {
	result, err := ltr.Edges.ExpertOrErr()
	if IsNotLoaded(err) {
		result, err = ltr.QueryExpert().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (q *Qualification) Tasks(ctx context.Context) (result []*LabellingTask, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = q.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = q.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = q.QueryTasks().All(ctx)
	}
	return result, err
}

func (q *Qualification) Experts(ctx context.Context) (result []*Expert, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = q.NamedExperts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = q.Edges.ExpertsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = q.QueryExperts().All(ctx)
	}
	return result, err
}
