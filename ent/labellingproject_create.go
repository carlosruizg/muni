// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carlosruizg/muni/ent/labellingproject"
)

// LabellingProjectCreate is the builder for creating a LabellingProject entity.
type LabellingProjectCreate struct {
	config
	mutation *LabellingProjectMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (lpc *LabellingProjectCreate) SetName(s string) *LabellingProjectCreate {
	lpc.mutation.SetName(s)
	return lpc
}

// SetStatus sets the "status" field.
func (lpc *LabellingProjectCreate) SetStatus(l labellingproject.Status) *LabellingProjectCreate {
	lpc.mutation.SetStatus(l)
	return lpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lpc *LabellingProjectCreate) SetNillableStatus(l *labellingproject.Status) *LabellingProjectCreate {
	if l != nil {
		lpc.SetStatus(*l)
	}
	return lpc
}

// SetDescription sets the "description" field.
func (lpc *LabellingProjectCreate) SetDescription(s string) *LabellingProjectCreate {
	lpc.mutation.SetDescription(s)
	return lpc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lpc *LabellingProjectCreate) SetNillableDescription(s *string) *LabellingProjectCreate {
	if s != nil {
		lpc.SetDescription(*s)
	}
	return lpc
}

// SetIsPrivate sets the "is_private" field.
func (lpc *LabellingProjectCreate) SetIsPrivate(b bool) *LabellingProjectCreate {
	lpc.mutation.SetIsPrivate(b)
	return lpc
}

// SetNillableIsPrivate sets the "is_private" field if the given value is not nil.
func (lpc *LabellingProjectCreate) SetNillableIsPrivate(b *bool) *LabellingProjectCreate {
	if b != nil {
		lpc.SetIsPrivate(*b)
	}
	return lpc
}

// SetCallbackURL sets the "callback_url" field.
func (lpc *LabellingProjectCreate) SetCallbackURL(s string) *LabellingProjectCreate {
	lpc.mutation.SetCallbackURL(s)
	return lpc
}

// SetNillableCallbackURL sets the "callback_url" field if the given value is not nil.
func (lpc *LabellingProjectCreate) SetNillableCallbackURL(s *string) *LabellingProjectCreate {
	if s != nil {
		lpc.SetCallbackURL(*s)
	}
	return lpc
}

// SetWorkersPerTask sets the "workers_per_task" field.
func (lpc *LabellingProjectCreate) SetWorkersPerTask(i int) *LabellingProjectCreate {
	lpc.mutation.SetWorkersPerTask(i)
	return lpc
}

// SetNillableWorkersPerTask sets the "workers_per_task" field if the given value is not nil.
func (lpc *LabellingProjectCreate) SetNillableWorkersPerTask(i *int) *LabellingProjectCreate {
	if i != nil {
		lpc.SetWorkersPerTask(*i)
	}
	return lpc
}

// Mutation returns the LabellingProjectMutation object of the builder.
func (lpc *LabellingProjectCreate) Mutation() *LabellingProjectMutation {
	return lpc.mutation
}

// Save creates the LabellingProject in the database.
func (lpc *LabellingProjectCreate) Save(ctx context.Context) (*LabellingProject, error) {
	lpc.defaults()
	return withHooks(ctx, lpc.sqlSave, lpc.mutation, lpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lpc *LabellingProjectCreate) SaveX(ctx context.Context) *LabellingProject {
	v, err := lpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpc *LabellingProjectCreate) Exec(ctx context.Context) error {
	_, err := lpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpc *LabellingProjectCreate) ExecX(ctx context.Context) {
	if err := lpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpc *LabellingProjectCreate) defaults() {
	if _, ok := lpc.mutation.Status(); !ok {
		v := labellingproject.DefaultStatus
		lpc.mutation.SetStatus(v)
	}
	if _, ok := lpc.mutation.IsPrivate(); !ok {
		v := labellingproject.DefaultIsPrivate
		lpc.mutation.SetIsPrivate(v)
	}
	if _, ok := lpc.mutation.WorkersPerTask(); !ok {
		v := labellingproject.DefaultWorkersPerTask
		lpc.mutation.SetWorkersPerTask(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpc *LabellingProjectCreate) check() error {
	if _, ok := lpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "LabellingProject.name"`)}
	}
	if v, ok := lpc.mutation.Name(); ok {
		if err := labellingproject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "LabellingProject.name": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "LabellingProject.status"`)}
	}
	if v, ok := lpc.mutation.Status(); ok {
		if err := labellingproject.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LabellingProject.status": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.IsPrivate(); !ok {
		return &ValidationError{Name: "is_private", err: errors.New(`ent: missing required field "LabellingProject.is_private"`)}
	}
	if _, ok := lpc.mutation.WorkersPerTask(); !ok {
		return &ValidationError{Name: "workers_per_task", err: errors.New(`ent: missing required field "LabellingProject.workers_per_task"`)}
	}
	return nil
}

func (lpc *LabellingProjectCreate) sqlSave(ctx context.Context) (*LabellingProject, error) {
	if err := lpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lpc.mutation.id = &_node.ID
	lpc.mutation.done = true
	return _node, nil
}

func (lpc *LabellingProjectCreate) createSpec() (*LabellingProject, *sqlgraph.CreateSpec) {
	var (
		_node = &LabellingProject{config: lpc.config}
		_spec = sqlgraph.NewCreateSpec(labellingproject.Table, sqlgraph.NewFieldSpec(labellingproject.FieldID, field.TypeInt))
	)
	if value, ok := lpc.mutation.Name(); ok {
		_spec.SetField(labellingproject.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lpc.mutation.Status(); ok {
		_spec.SetField(labellingproject.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := lpc.mutation.Description(); ok {
		_spec.SetField(labellingproject.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := lpc.mutation.IsPrivate(); ok {
		_spec.SetField(labellingproject.FieldIsPrivate, field.TypeBool, value)
		_node.IsPrivate = value
	}
	if value, ok := lpc.mutation.CallbackURL(); ok {
		_spec.SetField(labellingproject.FieldCallbackURL, field.TypeString, value)
		_node.CallbackURL = value
	}
	if value, ok := lpc.mutation.WorkersPerTask(); ok {
		_spec.SetField(labellingproject.FieldWorkersPerTask, field.TypeInt, value)
		_node.WorkersPerTask = value
	}
	return _node, _spec
}

// LabellingProjectCreateBulk is the builder for creating many LabellingProject entities in bulk.
type LabellingProjectCreateBulk struct {
	config
	builders []*LabellingProjectCreate
}

// Save creates the LabellingProject entities in the database.
func (lpcb *LabellingProjectCreateBulk) Save(ctx context.Context) ([]*LabellingProject, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lpcb.builders))
	nodes := make([]*LabellingProject, len(lpcb.builders))
	mutators := make([]Mutator, len(lpcb.builders))
	for i := range lpcb.builders {
		func(i int, root context.Context) {
			builder := lpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LabellingProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpcb *LabellingProjectCreateBulk) SaveX(ctx context.Context) []*LabellingProject {
	v, err := lpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpcb *LabellingProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := lpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpcb *LabellingProjectCreateBulk) ExecX(ctx context.Context) {
	if err := lpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
