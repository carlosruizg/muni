// Code generated by ent, DO NOT EDIT.

package qualification

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/carlosruizg/muni/enums"
)

const (
	// Label holds the string label denoting the qualification type in the database.
	Label = "qualification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// Table holds the table name of the qualification in the database.
	Table = "qualifications"
)

// Columns holds all SQL columns for qualification fields.
var Columns = []string{
	FieldID,
	FieldValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// ValueValidator is a validator for the "value" field enum values. It is called by the builders before save.
func ValueValidator(v enums.QualificationValue) error {
	switch v {
	case "CODER", "MEDICAL", "ARTIST", "STEM":
		return nil
	default:
		return fmt.Errorf("qualification: invalid enum value for value field: %q", v)
	}
}

// OrderOption defines the ordering options for the Qualification queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

var (
	// enums.QualificationValue must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.QualificationValue)(nil)
	// enums.QualificationValue must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.QualificationValue)(nil)
)
