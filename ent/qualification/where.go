// Code generated by ent, DO NOT EDIT.

package qualification

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/carlosruizg/muni/ent/predicate"
	"github.com/carlosruizg/muni/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Qualification {
	return predicate.Qualification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Qualification {
	return predicate.Qualification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Qualification {
	return predicate.Qualification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Qualification {
	return predicate.Qualification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Qualification {
	return predicate.Qualification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Qualification {
	return predicate.Qualification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Qualification {
	return predicate.Qualification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Qualification {
	return predicate.Qualification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Qualification {
	return predicate.Qualification(sql.FieldLTE(FieldID, id))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v schema.QualificationValue) predicate.Qualification {
	vc := v
	return predicate.Qualification(sql.FieldEQ(FieldValue, vc))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v schema.QualificationValue) predicate.Qualification {
	vc := v
	return predicate.Qualification(sql.FieldNEQ(FieldValue, vc))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...schema.QualificationValue) predicate.Qualification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Qualification(sql.FieldIn(FieldValue, v...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...schema.QualificationValue) predicate.Qualification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Qualification(sql.FieldNotIn(FieldValue, v...))
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.Qualification {
	return predicate.Qualification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TasksTable, TasksPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.LabellingTask) predicate.Qualification {
	return predicate.Qualification(func(s *sql.Selector) {
		step := newTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExperts applies the HasEdge predicate on the "experts" edge.
func HasExperts() predicate.Qualification {
	return predicate.Qualification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ExpertsTable, ExpertsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExpertsWith applies the HasEdge predicate on the "experts" edge with a given conditions (other predicates).
func HasExpertsWith(preds ...predicate.Expert) predicate.Qualification {
	return predicate.Qualification(func(s *sql.Selector) {
		step := newExpertsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Qualification) predicate.Qualification {
	return predicate.Qualification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Qualification) predicate.Qualification {
	return predicate.Qualification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Qualification) predicate.Qualification {
	return predicate.Qualification(func(s *sql.Selector) {
		p(s.Not())
	})
}
