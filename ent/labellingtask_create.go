// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carlosruizg/muni/ent/labellingtask"
	"github.com/carlosruizg/muni/ent/labellingtaskresponse"
	"github.com/carlosruizg/muni/ent/qualification"
)

// LabellingTaskCreate is the builder for creating a LabellingTask entity.
type LabellingTaskCreate struct {
	config
	mutation *LabellingTaskMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (ltc *LabellingTaskCreate) SetTitle(s string) *LabellingTaskCreate {
	ltc.mutation.SetTitle(s)
	return ltc
}

// SetDescription sets the "description" field.
func (ltc *LabellingTaskCreate) SetDescription(s string) *LabellingTaskCreate {
	ltc.mutation.SetDescription(s)
	return ltc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ltc *LabellingTaskCreate) SetNillableDescription(s *string) *LabellingTaskCreate {
	if s != nil {
		ltc.SetDescription(*s)
	}
	return ltc
}

// SetQualificationRequired sets the "qualification_required" field.
func (ltc *LabellingTaskCreate) SetQualificationRequired(b bool) *LabellingTaskCreate {
	ltc.mutation.SetQualificationRequired(b)
	return ltc
}

// SetCallbackURL sets the "callback_url" field.
func (ltc *LabellingTaskCreate) SetCallbackURL(s string) *LabellingTaskCreate {
	ltc.mutation.SetCallbackURL(s)
	return ltc
}

// SetNillableCallbackURL sets the "callback_url" field if the given value is not nil.
func (ltc *LabellingTaskCreate) SetNillableCallbackURL(s *string) *LabellingTaskCreate {
	if s != nil {
		ltc.SetCallbackURL(*s)
	}
	return ltc
}

// AddResponseIDs adds the "responses" edge to the LabellingTaskResponse entity by IDs.
func (ltc *LabellingTaskCreate) AddResponseIDs(ids ...int) *LabellingTaskCreate {
	ltc.mutation.AddResponseIDs(ids...)
	return ltc
}

// AddResponses adds the "responses" edges to the LabellingTaskResponse entity.
func (ltc *LabellingTaskCreate) AddResponses(l ...*LabellingTaskResponse) *LabellingTaskCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ltc.AddResponseIDs(ids...)
}

// AddExpertRequirementIDs adds the "expert_requirements" edge to the Qualification entity by IDs.
func (ltc *LabellingTaskCreate) AddExpertRequirementIDs(ids ...int) *LabellingTaskCreate {
	ltc.mutation.AddExpertRequirementIDs(ids...)
	return ltc
}

// AddExpertRequirements adds the "expert_requirements" edges to the Qualification entity.
func (ltc *LabellingTaskCreate) AddExpertRequirements(q ...*Qualification) *LabellingTaskCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ltc.AddExpertRequirementIDs(ids...)
}

// Mutation returns the LabellingTaskMutation object of the builder.
func (ltc *LabellingTaskCreate) Mutation() *LabellingTaskMutation {
	return ltc.mutation
}

// Save creates the LabellingTask in the database.
func (ltc *LabellingTaskCreate) Save(ctx context.Context) (*LabellingTask, error) {
	return withHooks(ctx, ltc.sqlSave, ltc.mutation, ltc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ltc *LabellingTaskCreate) SaveX(ctx context.Context) *LabellingTask {
	v, err := ltc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltc *LabellingTaskCreate) Exec(ctx context.Context) error {
	_, err := ltc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltc *LabellingTaskCreate) ExecX(ctx context.Context) {
	if err := ltc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltc *LabellingTaskCreate) check() error {
	if _, ok := ltc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "LabellingTask.title"`)}
	}
	if v, ok := ltc.mutation.Title(); ok {
		if err := labellingtask.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "LabellingTask.title": %w`, err)}
		}
	}
	if _, ok := ltc.mutation.QualificationRequired(); !ok {
		return &ValidationError{Name: "qualification_required", err: errors.New(`ent: missing required field "LabellingTask.qualification_required"`)}
	}
	return nil
}

func (ltc *LabellingTaskCreate) sqlSave(ctx context.Context) (*LabellingTask, error) {
	if err := ltc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ltc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ltc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ltc.mutation.id = &_node.ID
	ltc.mutation.done = true
	return _node, nil
}

func (ltc *LabellingTaskCreate) createSpec() (*LabellingTask, *sqlgraph.CreateSpec) {
	var (
		_node = &LabellingTask{config: ltc.config}
		_spec = sqlgraph.NewCreateSpec(labellingtask.Table, sqlgraph.NewFieldSpec(labellingtask.FieldID, field.TypeInt))
	)
	if value, ok := ltc.mutation.Title(); ok {
		_spec.SetField(labellingtask.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ltc.mutation.Description(); ok {
		_spec.SetField(labellingtask.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ltc.mutation.QualificationRequired(); ok {
		_spec.SetField(labellingtask.FieldQualificationRequired, field.TypeBool, value)
		_node.QualificationRequired = value
	}
	if value, ok := ltc.mutation.CallbackURL(); ok {
		_spec.SetField(labellingtask.FieldCallbackURL, field.TypeString, value)
		_node.CallbackURL = value
	}
	if nodes := ltc.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   labellingtask.ResponsesTable,
			Columns: []string{labellingtask.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(labellingtaskresponse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ltc.mutation.ExpertRequirementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   labellingtask.ExpertRequirementsTable,
			Columns: labellingtask.ExpertRequirementsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qualification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LabellingTaskCreateBulk is the builder for creating many LabellingTask entities in bulk.
type LabellingTaskCreateBulk struct {
	config
	builders []*LabellingTaskCreate
}

// Save creates the LabellingTask entities in the database.
func (ltcb *LabellingTaskCreateBulk) Save(ctx context.Context) ([]*LabellingTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ltcb.builders))
	nodes := make([]*LabellingTask, len(ltcb.builders))
	mutators := make([]Mutator, len(ltcb.builders))
	for i := range ltcb.builders {
		func(i int, root context.Context) {
			builder := ltcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LabellingTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ltcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ltcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ltcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ltcb *LabellingTaskCreateBulk) SaveX(ctx context.Context) []*LabellingTask {
	v, err := ltcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltcb *LabellingTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := ltcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltcb *LabellingTaskCreateBulk) ExecX(ctx context.Context) {
	if err := ltcb.Exec(ctx); err != nil {
		panic(err)
	}
}
