// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/carlosruizg/muni/ent/labellingproject"
)

// LabellingProject is the model entity for the LabellingProject schema.
type LabellingProject struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Status holds the value of the "status" field.
	Status labellingproject.Status `json:"status,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// IsPrivate holds the value of the "is_private" field.
	IsPrivate bool `json:"is_private,omitempty"`
	// CallbackURL holds the value of the "callback_url" field.
	CallbackURL string `json:"callback_url,omitempty"`
	// WorkersPerTask holds the value of the "workers_per_task" field.
	WorkersPerTask int `json:"workers_per_task,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LabellingProject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case labellingproject.FieldIsPrivate:
			values[i] = new(sql.NullBool)
		case labellingproject.FieldID, labellingproject.FieldWorkersPerTask:
			values[i] = new(sql.NullInt64)
		case labellingproject.FieldName, labellingproject.FieldStatus, labellingproject.FieldDescription, labellingproject.FieldCallbackURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LabellingProject fields.
func (lp *LabellingProject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case labellingproject.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lp.ID = int(value.Int64)
		case labellingproject.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				lp.Name = value.String
			}
		case labellingproject.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				lp.Status = labellingproject.Status(value.String)
			}
		case labellingproject.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				lp.Description = value.String
			}
		case labellingproject.FieldIsPrivate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_private", values[i])
			} else if value.Valid {
				lp.IsPrivate = value.Bool
			}
		case labellingproject.FieldCallbackURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field callback_url", values[i])
			} else if value.Valid {
				lp.CallbackURL = value.String
			}
		case labellingproject.FieldWorkersPerTask:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field workers_per_task", values[i])
			} else if value.Valid {
				lp.WorkersPerTask = int(value.Int64)
			}
		default:
			lp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LabellingProject.
// This includes values selected through modifiers, order, etc.
func (lp *LabellingProject) Value(name string) (ent.Value, error) {
	return lp.selectValues.Get(name)
}

// Update returns a builder for updating this LabellingProject.
// Note that you need to call LabellingProject.Unwrap() before calling this method if this LabellingProject
// was returned from a transaction, and the transaction was committed or rolled back.
func (lp *LabellingProject) Update() *LabellingProjectUpdateOne {
	return NewLabellingProjectClient(lp.config).UpdateOne(lp)
}

// Unwrap unwraps the LabellingProject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lp *LabellingProject) Unwrap() *LabellingProject {
	_tx, ok := lp.config.driver.(*txDriver)
	if !ok {
		panic("ent: LabellingProject is not a transactional entity")
	}
	lp.config.driver = _tx.drv
	return lp
}

// String implements the fmt.Stringer.
func (lp *LabellingProject) String() string {
	var builder strings.Builder
	builder.WriteString("LabellingProject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lp.ID))
	builder.WriteString("name=")
	builder.WriteString(lp.Name)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", lp.Status))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(lp.Description)
	builder.WriteString(", ")
	builder.WriteString("is_private=")
	builder.WriteString(fmt.Sprintf("%v", lp.IsPrivate))
	builder.WriteString(", ")
	builder.WriteString("callback_url=")
	builder.WriteString(lp.CallbackURL)
	builder.WriteString(", ")
	builder.WriteString("workers_per_task=")
	builder.WriteString(fmt.Sprintf("%v", lp.WorkersPerTask))
	builder.WriteByte(')')
	return builder.String()
}

// LabellingProjects is a parsable slice of LabellingProject.
type LabellingProjects []*LabellingProject
