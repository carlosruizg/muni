// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carlosruizg/muni/ent/expert"
	"github.com/carlosruizg/muni/ent/predicate"
	"github.com/carlosruizg/muni/ent/qualification"
	"github.com/carlosruizg/muni/enums"
)

// QualificationUpdate is the builder for updating Qualification entities.
type QualificationUpdate struct {
	config
	hooks    []Hook
	mutation *QualificationMutation
}

// Where appends a list predicates to the QualificationUpdate builder.
func (qu *QualificationUpdate) Where(ps ...predicate.Qualification) *QualificationUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetValue sets the "value" field.
func (qu *QualificationUpdate) SetValue(ev enums.QualificationValue) *QualificationUpdate {
	qu.mutation.SetValue(ev)
	return qu
}

// AddExpertIDs adds the "experts" edge to the Expert entity by IDs.
func (qu *QualificationUpdate) AddExpertIDs(ids ...int) *QualificationUpdate {
	qu.mutation.AddExpertIDs(ids...)
	return qu
}

// AddExperts adds the "experts" edges to the Expert entity.
func (qu *QualificationUpdate) AddExperts(e ...*Expert) *QualificationUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return qu.AddExpertIDs(ids...)
}

// Mutation returns the QualificationMutation object of the builder.
func (qu *QualificationUpdate) Mutation() *QualificationMutation {
	return qu.mutation
}

// ClearExperts clears all "experts" edges to the Expert entity.
func (qu *QualificationUpdate) ClearExperts() *QualificationUpdate {
	qu.mutation.ClearExperts()
	return qu
}

// RemoveExpertIDs removes the "experts" edge to Expert entities by IDs.
func (qu *QualificationUpdate) RemoveExpertIDs(ids ...int) *QualificationUpdate {
	qu.mutation.RemoveExpertIDs(ids...)
	return qu
}

// RemoveExperts removes "experts" edges to Expert entities.
func (qu *QualificationUpdate) RemoveExperts(e ...*Expert) *QualificationUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return qu.RemoveExpertIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QualificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QualificationUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QualificationUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QualificationUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QualificationUpdate) check() error {
	if v, ok := qu.mutation.Value(); ok {
		if err := qualification.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Qualification.value": %w`, err)}
		}
	}
	return nil
}

func (qu *QualificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(qualification.Table, qualification.Columns, sqlgraph.NewFieldSpec(qualification.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Value(); ok {
		_spec.SetField(qualification.FieldValue, field.TypeEnum, value)
	}
	if qu.mutation.ExpertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   qualification.ExpertsTable,
			Columns: qualification.ExpertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedExpertsIDs(); len(nodes) > 0 && !qu.mutation.ExpertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   qualification.ExpertsTable,
			Columns: qualification.ExpertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.ExpertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   qualification.ExpertsTable,
			Columns: qualification.ExpertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qualification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QualificationUpdateOne is the builder for updating a single Qualification entity.
type QualificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QualificationMutation
}

// SetValue sets the "value" field.
func (quo *QualificationUpdateOne) SetValue(ev enums.QualificationValue) *QualificationUpdateOne {
	quo.mutation.SetValue(ev)
	return quo
}

// AddExpertIDs adds the "experts" edge to the Expert entity by IDs.
func (quo *QualificationUpdateOne) AddExpertIDs(ids ...int) *QualificationUpdateOne {
	quo.mutation.AddExpertIDs(ids...)
	return quo
}

// AddExperts adds the "experts" edges to the Expert entity.
func (quo *QualificationUpdateOne) AddExperts(e ...*Expert) *QualificationUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return quo.AddExpertIDs(ids...)
}

// Mutation returns the QualificationMutation object of the builder.
func (quo *QualificationUpdateOne) Mutation() *QualificationMutation {
	return quo.mutation
}

// ClearExperts clears all "experts" edges to the Expert entity.
func (quo *QualificationUpdateOne) ClearExperts() *QualificationUpdateOne {
	quo.mutation.ClearExperts()
	return quo
}

// RemoveExpertIDs removes the "experts" edge to Expert entities by IDs.
func (quo *QualificationUpdateOne) RemoveExpertIDs(ids ...int) *QualificationUpdateOne {
	quo.mutation.RemoveExpertIDs(ids...)
	return quo
}

// RemoveExperts removes "experts" edges to Expert entities.
func (quo *QualificationUpdateOne) RemoveExperts(e ...*Expert) *QualificationUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return quo.RemoveExpertIDs(ids...)
}

// Where appends a list predicates to the QualificationUpdate builder.
func (quo *QualificationUpdateOne) Where(ps ...predicate.Qualification) *QualificationUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QualificationUpdateOne) Select(field string, fields ...string) *QualificationUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Qualification entity.
func (quo *QualificationUpdateOne) Save(ctx context.Context) (*Qualification, error) {
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QualificationUpdateOne) SaveX(ctx context.Context) *Qualification {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QualificationUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QualificationUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QualificationUpdateOne) check() error {
	if v, ok := quo.mutation.Value(); ok {
		if err := qualification.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Qualification.value": %w`, err)}
		}
	}
	return nil
}

func (quo *QualificationUpdateOne) sqlSave(ctx context.Context) (_node *Qualification, err error) {
	if err := quo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(qualification.Table, qualification.Columns, sqlgraph.NewFieldSpec(qualification.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Qualification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, qualification.FieldID)
		for _, f := range fields {
			if !qualification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != qualification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.Value(); ok {
		_spec.SetField(qualification.FieldValue, field.TypeEnum, value)
	}
	if quo.mutation.ExpertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   qualification.ExpertsTable,
			Columns: qualification.ExpertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedExpertsIDs(); len(nodes) > 0 && !quo.mutation.ExpertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   qualification.ExpertsTable,
			Columns: qualification.ExpertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.ExpertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   qualification.ExpertsTable,
			Columns: qualification.ExpertsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expert.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Qualification{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qualification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
