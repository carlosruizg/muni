// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/carlosruizg/muni/ent/expert"
	"github.com/carlosruizg/muni/ent/labellingproject"
	"github.com/carlosruizg/muni/ent/labellingtask"
	"github.com/carlosruizg/muni/ent/labellingtaskresponse"
	"github.com/carlosruizg/muni/ent/qualification"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ExpertEdge is the edge representation of Expert.
type ExpertEdge struct {
	Node   *Expert `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// ExpertConnection is the connection containing edges to Expert.
type ExpertConnection struct {
	Edges      []*ExpertEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *ExpertConnection) build(nodes []*Expert, pager *expertPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Expert
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Expert {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Expert {
			return nodes[i]
		}
	}
	c.Edges = make([]*ExpertEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ExpertEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ExpertPaginateOption enables pagination customization.
type ExpertPaginateOption func(*expertPager) error

// WithExpertOrder configures pagination ordering.
func WithExpertOrder(order *ExpertOrder) ExpertPaginateOption {
	if order == nil {
		order = DefaultExpertOrder
	}
	o := *order
	return func(pager *expertPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultExpertOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithExpertFilter configures pagination filter.
func WithExpertFilter(filter func(*ExpertQuery) (*ExpertQuery, error)) ExpertPaginateOption {
	return func(pager *expertPager) error {
		if filter == nil {
			return errors.New("ExpertQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type expertPager struct {
	reverse bool
	order   *ExpertOrder
	filter  func(*ExpertQuery) (*ExpertQuery, error)
}

func newExpertPager(opts []ExpertPaginateOption, reverse bool) (*expertPager, error) {
	pager := &expertPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultExpertOrder
	}
	return pager, nil
}

func (p *expertPager) applyFilter(query *ExpertQuery) (*ExpertQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *expertPager) toCursor(e *Expert) Cursor {
	return p.order.Field.toCursor(e)
}

func (p *expertPager) applyCursors(query *ExpertQuery, after, before *Cursor) (*ExpertQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultExpertOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *expertPager) applyOrder(query *ExpertQuery) *ExpertQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultExpertOrder.Field {
		query = query.Order(DefaultExpertOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *expertPager) orderExpr(query *ExpertQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultExpertOrder.Field {
			b.Comma().Ident(DefaultExpertOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Expert.
func (e *ExpertQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ExpertPaginateOption,
) (*ExpertConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newExpertPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if e, err = pager.applyFilter(e); err != nil {
		return nil, err
	}
	conn := &ExpertConnection{Edges: []*ExpertEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := e.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if e, err = pager.applyCursors(e, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		e.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := e.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	e = pager.applyOrder(e)
	nodes, err := e.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ExpertOrderField defines the ordering field of Expert.
type ExpertOrderField struct {
	// Value extracts the ordering value from the given Expert.
	Value    func(*Expert) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) expert.OrderOption
	toCursor func(*Expert) Cursor
}

// ExpertOrder defines the ordering of Expert.
type ExpertOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *ExpertOrderField `json:"field"`
}

// DefaultExpertOrder is the default ordering of Expert.
var DefaultExpertOrder = &ExpertOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ExpertOrderField{
		Value: func(e *Expert) (ent.Value, error) {
			return e.ID, nil
		},
		column: expert.FieldID,
		toTerm: expert.ByID,
		toCursor: func(e *Expert) Cursor {
			return Cursor{ID: e.ID}
		},
	},
}

// ToEdge converts Expert into ExpertEdge.
func (e *Expert) ToEdge(order *ExpertOrder) *ExpertEdge {
	if order == nil {
		order = DefaultExpertOrder
	}
	return &ExpertEdge{
		Node:   e,
		Cursor: order.Field.toCursor(e),
	}
}

// LabellingProjectEdge is the edge representation of LabellingProject.
type LabellingProjectEdge struct {
	Node   *LabellingProject `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// LabellingProjectConnection is the connection containing edges to LabellingProject.
type LabellingProjectConnection struct {
	Edges      []*LabellingProjectEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *LabellingProjectConnection) build(nodes []*LabellingProject, pager *labellingprojectPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *LabellingProject
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *LabellingProject {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *LabellingProject {
			return nodes[i]
		}
	}
	c.Edges = make([]*LabellingProjectEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &LabellingProjectEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// LabellingProjectPaginateOption enables pagination customization.
type LabellingProjectPaginateOption func(*labellingprojectPager) error

// WithLabellingProjectOrder configures pagination ordering.
func WithLabellingProjectOrder(order *LabellingProjectOrder) LabellingProjectPaginateOption {
	if order == nil {
		order = DefaultLabellingProjectOrder
	}
	o := *order
	return func(pager *labellingprojectPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLabellingProjectOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLabellingProjectFilter configures pagination filter.
func WithLabellingProjectFilter(filter func(*LabellingProjectQuery) (*LabellingProjectQuery, error)) LabellingProjectPaginateOption {
	return func(pager *labellingprojectPager) error {
		if filter == nil {
			return errors.New("LabellingProjectQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type labellingprojectPager struct {
	reverse bool
	order   *LabellingProjectOrder
	filter  func(*LabellingProjectQuery) (*LabellingProjectQuery, error)
}

func newLabellingProjectPager(opts []LabellingProjectPaginateOption, reverse bool) (*labellingprojectPager, error) {
	pager := &labellingprojectPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLabellingProjectOrder
	}
	return pager, nil
}

func (p *labellingprojectPager) applyFilter(query *LabellingProjectQuery) (*LabellingProjectQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *labellingprojectPager) toCursor(lp *LabellingProject) Cursor {
	return p.order.Field.toCursor(lp)
}

func (p *labellingprojectPager) applyCursors(query *LabellingProjectQuery, after, before *Cursor) (*LabellingProjectQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultLabellingProjectOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *labellingprojectPager) applyOrder(query *LabellingProjectQuery) *LabellingProjectQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultLabellingProjectOrder.Field {
		query = query.Order(DefaultLabellingProjectOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *labellingprojectPager) orderExpr(query *LabellingProjectQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultLabellingProjectOrder.Field {
			b.Comma().Ident(DefaultLabellingProjectOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to LabellingProject.
func (lp *LabellingProjectQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LabellingProjectPaginateOption,
) (*LabellingProjectConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLabellingProjectPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if lp, err = pager.applyFilter(lp); err != nil {
		return nil, err
	}
	conn := &LabellingProjectConnection{Edges: []*LabellingProjectEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := lp.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if lp, err = pager.applyCursors(lp, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		lp.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := lp.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	lp = pager.applyOrder(lp)
	nodes, err := lp.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// LabellingProjectOrderField defines the ordering field of LabellingProject.
type LabellingProjectOrderField struct {
	// Value extracts the ordering value from the given LabellingProject.
	Value    func(*LabellingProject) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) labellingproject.OrderOption
	toCursor func(*LabellingProject) Cursor
}

// LabellingProjectOrder defines the ordering of LabellingProject.
type LabellingProjectOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *LabellingProjectOrderField `json:"field"`
}

// DefaultLabellingProjectOrder is the default ordering of LabellingProject.
var DefaultLabellingProjectOrder = &LabellingProjectOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &LabellingProjectOrderField{
		Value: func(lp *LabellingProject) (ent.Value, error) {
			return lp.ID, nil
		},
		column: labellingproject.FieldID,
		toTerm: labellingproject.ByID,
		toCursor: func(lp *LabellingProject) Cursor {
			return Cursor{ID: lp.ID}
		},
	},
}

// ToEdge converts LabellingProject into LabellingProjectEdge.
func (lp *LabellingProject) ToEdge(order *LabellingProjectOrder) *LabellingProjectEdge {
	if order == nil {
		order = DefaultLabellingProjectOrder
	}
	return &LabellingProjectEdge{
		Node:   lp,
		Cursor: order.Field.toCursor(lp),
	}
}

// LabellingTaskEdge is the edge representation of LabellingTask.
type LabellingTaskEdge struct {
	Node   *LabellingTask `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// LabellingTaskConnection is the connection containing edges to LabellingTask.
type LabellingTaskConnection struct {
	Edges      []*LabellingTaskEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *LabellingTaskConnection) build(nodes []*LabellingTask, pager *labellingtaskPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *LabellingTask
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *LabellingTask {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *LabellingTask {
			return nodes[i]
		}
	}
	c.Edges = make([]*LabellingTaskEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &LabellingTaskEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// LabellingTaskPaginateOption enables pagination customization.
type LabellingTaskPaginateOption func(*labellingtaskPager) error

// WithLabellingTaskOrder configures pagination ordering.
func WithLabellingTaskOrder(order *LabellingTaskOrder) LabellingTaskPaginateOption {
	if order == nil {
		order = DefaultLabellingTaskOrder
	}
	o := *order
	return func(pager *labellingtaskPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLabellingTaskOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLabellingTaskFilter configures pagination filter.
func WithLabellingTaskFilter(filter func(*LabellingTaskQuery) (*LabellingTaskQuery, error)) LabellingTaskPaginateOption {
	return func(pager *labellingtaskPager) error {
		if filter == nil {
			return errors.New("LabellingTaskQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type labellingtaskPager struct {
	reverse bool
	order   *LabellingTaskOrder
	filter  func(*LabellingTaskQuery) (*LabellingTaskQuery, error)
}

func newLabellingTaskPager(opts []LabellingTaskPaginateOption, reverse bool) (*labellingtaskPager, error) {
	pager := &labellingtaskPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLabellingTaskOrder
	}
	return pager, nil
}

func (p *labellingtaskPager) applyFilter(query *LabellingTaskQuery) (*LabellingTaskQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *labellingtaskPager) toCursor(lt *LabellingTask) Cursor {
	return p.order.Field.toCursor(lt)
}

func (p *labellingtaskPager) applyCursors(query *LabellingTaskQuery, after, before *Cursor) (*LabellingTaskQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultLabellingTaskOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *labellingtaskPager) applyOrder(query *LabellingTaskQuery) *LabellingTaskQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultLabellingTaskOrder.Field {
		query = query.Order(DefaultLabellingTaskOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *labellingtaskPager) orderExpr(query *LabellingTaskQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultLabellingTaskOrder.Field {
			b.Comma().Ident(DefaultLabellingTaskOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to LabellingTask.
func (lt *LabellingTaskQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LabellingTaskPaginateOption,
) (*LabellingTaskConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLabellingTaskPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if lt, err = pager.applyFilter(lt); err != nil {
		return nil, err
	}
	conn := &LabellingTaskConnection{Edges: []*LabellingTaskEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := lt.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if lt, err = pager.applyCursors(lt, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		lt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := lt.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	lt = pager.applyOrder(lt)
	nodes, err := lt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// LabellingTaskOrderField defines the ordering field of LabellingTask.
type LabellingTaskOrderField struct {
	// Value extracts the ordering value from the given LabellingTask.
	Value    func(*LabellingTask) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) labellingtask.OrderOption
	toCursor func(*LabellingTask) Cursor
}

// LabellingTaskOrder defines the ordering of LabellingTask.
type LabellingTaskOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *LabellingTaskOrderField `json:"field"`
}

// DefaultLabellingTaskOrder is the default ordering of LabellingTask.
var DefaultLabellingTaskOrder = &LabellingTaskOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &LabellingTaskOrderField{
		Value: func(lt *LabellingTask) (ent.Value, error) {
			return lt.ID, nil
		},
		column: labellingtask.FieldID,
		toTerm: labellingtask.ByID,
		toCursor: func(lt *LabellingTask) Cursor {
			return Cursor{ID: lt.ID}
		},
	},
}

// ToEdge converts LabellingTask into LabellingTaskEdge.
func (lt *LabellingTask) ToEdge(order *LabellingTaskOrder) *LabellingTaskEdge {
	if order == nil {
		order = DefaultLabellingTaskOrder
	}
	return &LabellingTaskEdge{
		Node:   lt,
		Cursor: order.Field.toCursor(lt),
	}
}

// LabellingTaskResponseEdge is the edge representation of LabellingTaskResponse.
type LabellingTaskResponseEdge struct {
	Node   *LabellingTaskResponse `json:"node"`
	Cursor Cursor                 `json:"cursor"`
}

// LabellingTaskResponseConnection is the connection containing edges to LabellingTaskResponse.
type LabellingTaskResponseConnection struct {
	Edges      []*LabellingTaskResponseEdge `json:"edges"`
	PageInfo   PageInfo                     `json:"pageInfo"`
	TotalCount int                          `json:"totalCount"`
}

func (c *LabellingTaskResponseConnection) build(nodes []*LabellingTaskResponse, pager *labellingtaskresponsePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *LabellingTaskResponse
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *LabellingTaskResponse {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *LabellingTaskResponse {
			return nodes[i]
		}
	}
	c.Edges = make([]*LabellingTaskResponseEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &LabellingTaskResponseEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// LabellingTaskResponsePaginateOption enables pagination customization.
type LabellingTaskResponsePaginateOption func(*labellingtaskresponsePager) error

// WithLabellingTaskResponseOrder configures pagination ordering.
func WithLabellingTaskResponseOrder(order *LabellingTaskResponseOrder) LabellingTaskResponsePaginateOption {
	if order == nil {
		order = DefaultLabellingTaskResponseOrder
	}
	o := *order
	return func(pager *labellingtaskresponsePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLabellingTaskResponseOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLabellingTaskResponseFilter configures pagination filter.
func WithLabellingTaskResponseFilter(filter func(*LabellingTaskResponseQuery) (*LabellingTaskResponseQuery, error)) LabellingTaskResponsePaginateOption {
	return func(pager *labellingtaskresponsePager) error {
		if filter == nil {
			return errors.New("LabellingTaskResponseQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type labellingtaskresponsePager struct {
	reverse bool
	order   *LabellingTaskResponseOrder
	filter  func(*LabellingTaskResponseQuery) (*LabellingTaskResponseQuery, error)
}

func newLabellingTaskResponsePager(opts []LabellingTaskResponsePaginateOption, reverse bool) (*labellingtaskresponsePager, error) {
	pager := &labellingtaskresponsePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLabellingTaskResponseOrder
	}
	return pager, nil
}

func (p *labellingtaskresponsePager) applyFilter(query *LabellingTaskResponseQuery) (*LabellingTaskResponseQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *labellingtaskresponsePager) toCursor(ltr *LabellingTaskResponse) Cursor {
	return p.order.Field.toCursor(ltr)
}

func (p *labellingtaskresponsePager) applyCursors(query *LabellingTaskResponseQuery, after, before *Cursor) (*LabellingTaskResponseQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultLabellingTaskResponseOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *labellingtaskresponsePager) applyOrder(query *LabellingTaskResponseQuery) *LabellingTaskResponseQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultLabellingTaskResponseOrder.Field {
		query = query.Order(DefaultLabellingTaskResponseOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *labellingtaskresponsePager) orderExpr(query *LabellingTaskResponseQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultLabellingTaskResponseOrder.Field {
			b.Comma().Ident(DefaultLabellingTaskResponseOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to LabellingTaskResponse.
func (ltr *LabellingTaskResponseQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LabellingTaskResponsePaginateOption,
) (*LabellingTaskResponseConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLabellingTaskResponsePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ltr, err = pager.applyFilter(ltr); err != nil {
		return nil, err
	}
	conn := &LabellingTaskResponseConnection{Edges: []*LabellingTaskResponseEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ltr.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ltr, err = pager.applyCursors(ltr, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ltr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ltr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ltr = pager.applyOrder(ltr)
	nodes, err := ltr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// LabellingTaskResponseOrderField defines the ordering field of LabellingTaskResponse.
type LabellingTaskResponseOrderField struct {
	// Value extracts the ordering value from the given LabellingTaskResponse.
	Value    func(*LabellingTaskResponse) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) labellingtaskresponse.OrderOption
	toCursor func(*LabellingTaskResponse) Cursor
}

// LabellingTaskResponseOrder defines the ordering of LabellingTaskResponse.
type LabellingTaskResponseOrder struct {
	Direction OrderDirection                   `json:"direction"`
	Field     *LabellingTaskResponseOrderField `json:"field"`
}

// DefaultLabellingTaskResponseOrder is the default ordering of LabellingTaskResponse.
var DefaultLabellingTaskResponseOrder = &LabellingTaskResponseOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &LabellingTaskResponseOrderField{
		Value: func(ltr *LabellingTaskResponse) (ent.Value, error) {
			return ltr.ID, nil
		},
		column: labellingtaskresponse.FieldID,
		toTerm: labellingtaskresponse.ByID,
		toCursor: func(ltr *LabellingTaskResponse) Cursor {
			return Cursor{ID: ltr.ID}
		},
	},
}

// ToEdge converts LabellingTaskResponse into LabellingTaskResponseEdge.
func (ltr *LabellingTaskResponse) ToEdge(order *LabellingTaskResponseOrder) *LabellingTaskResponseEdge {
	if order == nil {
		order = DefaultLabellingTaskResponseOrder
	}
	return &LabellingTaskResponseEdge{
		Node:   ltr,
		Cursor: order.Field.toCursor(ltr),
	}
}

// QualificationEdge is the edge representation of Qualification.
type QualificationEdge struct {
	Node   *Qualification `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// QualificationConnection is the connection containing edges to Qualification.
type QualificationConnection struct {
	Edges      []*QualificationEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *QualificationConnection) build(nodes []*Qualification, pager *qualificationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Qualification
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Qualification {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Qualification {
			return nodes[i]
		}
	}
	c.Edges = make([]*QualificationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &QualificationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// QualificationPaginateOption enables pagination customization.
type QualificationPaginateOption func(*qualificationPager) error

// WithQualificationOrder configures pagination ordering.
func WithQualificationOrder(order *QualificationOrder) QualificationPaginateOption {
	if order == nil {
		order = DefaultQualificationOrder
	}
	o := *order
	return func(pager *qualificationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultQualificationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithQualificationFilter configures pagination filter.
func WithQualificationFilter(filter func(*QualificationQuery) (*QualificationQuery, error)) QualificationPaginateOption {
	return func(pager *qualificationPager) error {
		if filter == nil {
			return errors.New("QualificationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type qualificationPager struct {
	reverse bool
	order   *QualificationOrder
	filter  func(*QualificationQuery) (*QualificationQuery, error)
}

func newQualificationPager(opts []QualificationPaginateOption, reverse bool) (*qualificationPager, error) {
	pager := &qualificationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultQualificationOrder
	}
	return pager, nil
}

func (p *qualificationPager) applyFilter(query *QualificationQuery) (*QualificationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *qualificationPager) toCursor(q *Qualification) Cursor {
	return p.order.Field.toCursor(q)
}

func (p *qualificationPager) applyCursors(query *QualificationQuery, after, before *Cursor) (*QualificationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultQualificationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *qualificationPager) applyOrder(query *QualificationQuery) *QualificationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultQualificationOrder.Field {
		query = query.Order(DefaultQualificationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *qualificationPager) orderExpr(query *QualificationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultQualificationOrder.Field {
			b.Comma().Ident(DefaultQualificationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Qualification.
func (q *QualificationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...QualificationPaginateOption,
) (*QualificationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newQualificationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if q, err = pager.applyFilter(q); err != nil {
		return nil, err
	}
	conn := &QualificationConnection{Edges: []*QualificationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := q.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if q, err = pager.applyCursors(q, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		q.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := q.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	q = pager.applyOrder(q)
	nodes, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// QualificationOrderField defines the ordering field of Qualification.
type QualificationOrderField struct {
	// Value extracts the ordering value from the given Qualification.
	Value    func(*Qualification) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) qualification.OrderOption
	toCursor func(*Qualification) Cursor
}

// QualificationOrder defines the ordering of Qualification.
type QualificationOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *QualificationOrderField `json:"field"`
}

// DefaultQualificationOrder is the default ordering of Qualification.
var DefaultQualificationOrder = &QualificationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &QualificationOrderField{
		Value: func(q *Qualification) (ent.Value, error) {
			return q.ID, nil
		},
		column: qualification.FieldID,
		toTerm: qualification.ByID,
		toCursor: func(q *Qualification) Cursor {
			return Cursor{ID: q.ID}
		},
	},
}

// ToEdge converts Qualification into QualificationEdge.
func (q *Qualification) ToEdge(order *QualificationOrder) *QualificationEdge {
	if order == nil {
		order = DefaultQualificationOrder
	}
	return &QualificationEdge{
		Node:   q,
		Cursor: order.Field.toCursor(q),
	}
}
