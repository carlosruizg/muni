// Code generated by ent, DO NOT EDIT.

package labellingtask

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the labellingtask type in the database.
	Label = "labelling_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldQualificationRequired holds the string denoting the qualification_required field in the database.
	FieldQualificationRequired = "qualification_required"
	// FieldCallbackURL holds the string denoting the callback_url field in the database.
	FieldCallbackURL = "callback_url"
	// EdgeResponses holds the string denoting the responses edge name in mutations.
	EdgeResponses = "responses"
	// EdgeExpertRequirements holds the string denoting the expert_requirements edge name in mutations.
	EdgeExpertRequirements = "expert_requirements"
	// Table holds the table name of the labellingtask in the database.
	Table = "labelling_tasks"
	// ResponsesTable is the table that holds the responses relation/edge.
	ResponsesTable = "labelling_task_responses"
	// ResponsesInverseTable is the table name for the LabellingTaskResponse entity.
	// It exists in this package in order to avoid circular dependency with the "labellingtaskresponse" package.
	ResponsesInverseTable = "labelling_task_responses"
	// ResponsesColumn is the table column denoting the responses relation/edge.
	ResponsesColumn = "labelling_task_responses"
	// ExpertRequirementsTable is the table that holds the expert_requirements relation/edge. The primary key declared below.
	ExpertRequirementsTable = "labelling_task_expert_requirements"
	// ExpertRequirementsInverseTable is the table name for the Qualification entity.
	// It exists in this package in order to avoid circular dependency with the "qualification" package.
	ExpertRequirementsInverseTable = "qualifications"
)

// Columns holds all SQL columns for labellingtask fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldQualificationRequired,
	FieldCallbackURL,
}

var (
	// ExpertRequirementsPrimaryKey and ExpertRequirementsColumn2 are the table columns denoting the
	// primary key for the expert_requirements relation (M2M).
	ExpertRequirementsPrimaryKey = []string{"labelling_task_id", "qualification_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
)

// OrderOption defines the ordering options for the LabellingTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByQualificationRequired orders the results by the qualification_required field.
func ByQualificationRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQualificationRequired, opts...).ToFunc()
}

// ByCallbackURL orders the results by the callback_url field.
func ByCallbackURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCallbackURL, opts...).ToFunc()
}

// ByResponsesCount orders the results by responses count.
func ByResponsesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResponsesStep(), opts...)
	}
}

// ByResponses orders the results by responses terms.
func ByResponses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResponsesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExpertRequirementsCount orders the results by expert_requirements count.
func ByExpertRequirementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExpertRequirementsStep(), opts...)
	}
}

// ByExpertRequirements orders the results by expert_requirements terms.
func ByExpertRequirements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExpertRequirementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newResponsesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResponsesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResponsesTable, ResponsesColumn),
	)
}
func newExpertRequirementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExpertRequirementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ExpertRequirementsTable, ExpertRequirementsPrimaryKey...),
	)
}
