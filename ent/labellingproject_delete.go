// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carlosruizg/muni/ent/labellingproject"
	"github.com/carlosruizg/muni/ent/predicate"
)

// LabellingProjectDelete is the builder for deleting a LabellingProject entity.
type LabellingProjectDelete struct {
	config
	hooks    []Hook
	mutation *LabellingProjectMutation
}

// Where appends a list predicates to the LabellingProjectDelete builder.
func (lpd *LabellingProjectDelete) Where(ps ...predicate.LabellingProject) *LabellingProjectDelete {
	lpd.mutation.Where(ps...)
	return lpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lpd *LabellingProjectDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lpd.sqlExec, lpd.mutation, lpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lpd *LabellingProjectDelete) ExecX(ctx context.Context) int {
	n, err := lpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lpd *LabellingProjectDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(labellingproject.Table, sqlgraph.NewFieldSpec(labellingproject.FieldID, field.TypeInt))
	if ps := lpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lpd.mutation.done = true
	return affected, err
}

// LabellingProjectDeleteOne is the builder for deleting a single LabellingProject entity.
type LabellingProjectDeleteOne struct {
	lpd *LabellingProjectDelete
}

// Where appends a list predicates to the LabellingProjectDelete builder.
func (lpdo *LabellingProjectDeleteOne) Where(ps ...predicate.LabellingProject) *LabellingProjectDeleteOne {
	lpdo.lpd.mutation.Where(ps...)
	return lpdo
}

// Exec executes the deletion query.
func (lpdo *LabellingProjectDeleteOne) Exec(ctx context.Context) error {
	n, err := lpdo.lpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{labellingproject.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lpdo *LabellingProjectDeleteOne) ExecX(ctx context.Context) {
	if err := lpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
